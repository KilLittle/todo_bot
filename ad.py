import asyncio
import psycopg2
from aiogram import Bot, Dispatcher, types, F, exceptions
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime, date
from psycopg2 import sql, Error
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineQueryResultArticle, InputTextMessageContent
from aiogram.fsm.state import State, StatesGroup

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = "8010104498:AAFu41LIYHrPWWl-kvT1pQ0GZrxE8AL0wZE"
ADMIN_USERNAME = ""
DATE_FORMAT = "%d.%m.%Y"
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
DB_CONFIG = {
    "dbname": "postgres",
    "user": "postgres",
    "password": "admin",
    "host": "localhost",
    "port": "5433"
}
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
def get_db_connection():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        return conn
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return None





# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class AddUserStates(StatesGroup):
    WAITING_USERNAME = State()
    WAITING_ROLE = State()

class ScheduleStates(StatesGroup):
    WAITING_SEMESTER_NAME = State()
    WAITING_START_DATE = State()
    WAITING_END_DATE = State()
    WAITING_PRACTICE_NAME = State()
    WAITING_PRACTICE_DESC = State()
    WAITING_TEACHER = State()
    CONFIRMATION = State()
class ScheduleDistribution(StatesGroup):
    select_schedule = State()
    confirm_distribution = State()
class ApplicationStates(StatesGroup):
    WAITING_APPLICATION_FILE = State()
    WAITING_APPLICATION_CONFIRM = State()

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
class AssignTeacherStates(StatesGroup):
    WAITING_STUDENT_SELECTION = State()
    WAITING_TEACHER_SELECTION = State()
    CONFIRM_ASSIGNMENT = State()

@dp.message(F.text == "üìÖ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def cmd_add_schedule(message: types.Message, state: FSMContext):
    """–ò–Ω–∏—Ü–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    if not await get_user_role_by_username(message.from_user.username):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–∏—Å—Ç–∞–º", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return



    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º–µ—Å—Ç—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä 2025'):",

    )
    await state.set_state(ScheduleStates.WAITING_SEMESTER_NAME)




@dp.message(ScheduleStates.WAITING_SEMESTER_NAME)
async def process_semester_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º–µ—Å—Ç—Ä–∞"""
    if len(message.text) > 100:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(semester_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(ScheduleStates.WAITING_START_DATE)


@dp.message(ScheduleStates.WAITING_START_DATE)
async def process_start_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞"""
    try:
        start_date = datetime.strptime(message.text, "%d.%m.%Y").date()

        await state.update_data(start_date=start_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ–º–µ—Å—Ç—Ä–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
        await state.set_state(ScheduleStates.WAITING_END_DATE)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")


@dp.message(ScheduleStates.WAITING_END_DATE)
async def process_end_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ–º–µ—Å—Ç—Ä–∞"""
    try:
        data = await state.get_data()
        start_date = data.get('start_date')
        end_date = datetime.strptime(message.text, "%d.%m.%Y").date()

        if end_date <= start_date:
            await message.answer("‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        await state.update_data(end_date=end_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞'):")
        await state.set_state(ScheduleStates.WAITING_PRACTICE_NAME)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")


@dp.message(ScheduleStates.WAITING_PRACTICE_NAME)
async def process_practice_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏"""
    if len(message.text) > 200:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(practice_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ '-'):")
    await state.set_state(ScheduleStates.WAITING_PRACTICE_DESC)

async def get_teachers_list() -> list[tuple]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT username,full_name 
            FROM users 
            WHERE role = 'teacher' 
            ORDER BY username
        """)
        teachers = cur.fetchall()
        cur.close()
        return teachers
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []
    finally:
        if conn:
            conn.close()


@dp.message(ScheduleStates.WAITING_PRACTICE_DESC)
async def process_practice_desc(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    practice_desc = None if message.text == "-" else message.text
    await state.update_data(practice_description=practice_desc)

    teachers = await get_teachers_list()
    if not teachers:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{full_name} (@{username})", callback_data=f"teacher_{username}")]
        for username, full_name in teachers
    ])

    await message.answer(
        "üë®‚Äçüè´ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=keyboard
    )
    await state.set_state(ScheduleStates.WAITING_TEACHER)




@dp.inline_query()
async def inline_teacher_search(inline_query: types.InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    query = inline_query.query.lower().strip()
    if not query:
        return

    teachers = await get_teachers_list()
    results = [
        InlineQueryResultArticle(
            id=username,
            title=full_name,
            input_message_content=InputTextMessageContent(
                message_text=f"–í—ã–±—Ä–∞–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {full_name}"
            )
        )
        for username, full_name in teachers
        if query in full_name.lower() or query in username.lower()
    ]



    await inline_query.answer(results)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏
@dp.callback_query(ScheduleStates.WAITING_TEACHER, F.data.startswith("teacher_"))
async def process_teacher_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    username = callback.data.split("_")[1]
    teacher_data = next((t for t in await get_teachers_list() if t[0] == username), None)

    if not teacher_data:
        await callback.answer("‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    username, full_name = teacher_data
    await state.update_data(responsible_teacher=username)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
    data = await state.get_data()
    confirm_text = (
        "üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n\n"
        f"–°–µ–º–µ—Å—Ç—Ä: {data['semester_name']}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {data['start_date'].strftime('%d.%m.%Y')}\n"
        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {data['end_date'].strftime('%d.%m.%Y')}\n"
        f"–ü—Ä–∞–∫—Ç–∏–∫–∞: {data['practice_name']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['practice_description'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {full_name} (@{username})\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )

    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_schedule"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_schedule")
        ]
    ])

    await callback.message.edit_text(confirm_text, reply_markup=confirm_keyboard)
    await state.set_state(ScheduleStates.CONFIRMATION)
    await callback.answer()


@dp.callback_query(ScheduleStates.CONFIRMATION, F.data == "confirm_schedule")
async def confirm_schedule(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    data = await state.get_data()

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute(
            """INSERT INTO schedule 
            (semester_name, start_date, end_date, practice_name, practice_description, responsible_teacher, created_by) 
            VALUES (%s, %s, %s, %s, %s, %s, %s)""",
            (
                data['semester_name'],
                data['start_date'],
                data['end_date'],
                data['practice_name'],
                data['practice_description'],
                data['responsible_teacher'],
                callback.from_user.username
            )
        )
        conn.commit()

        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é /start",
            reply_markup=None  # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await callback.message.answer(
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É",
            reply_markup=types.ReplyKeyboardRemove()
        )
    except Error as e:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
            reply_markup=None
        )
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    finally:
        if conn:
            conn.close()
        await state.clear()
    await callback.answer()


@dp.message(ScheduleStates.CONFIRMATION)
async def process_confirmation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    if message.text.lower() not in ["–¥–∞", "yes", "‚úÖ –¥–∞"]:
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute(
            """INSERT INTO schedule 
            (semester_name, start_date, end_date, practice_name, practice_description, responsible_teacher, created_by) 
            VALUES (%s, %s, %s, %s, %s, %s, %s)""",
            (
                data['semester_name'],
                data['start_date'],
                data['end_date'],
                data['practice_name'],
                data['practice_description'],
                data['responsible_teacher'],
                message.from_user.username
            )
        )
        conn.commit()

        await message.answer(
            "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é /start",
            reply_markup=types.ReplyKeyboardRemove()
        )
    except Error as e:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    finally:
        if conn:
            conn.close()
        await state.clear()


dp.callback_query(ScheduleStates.CONFIRMATION, F.data == "cancel_schedule")


async def cancel_schedule(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    await callback.message.edit_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=None  # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await callback.message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
        reply_markup=types.ReplyKeyboardRemove()
    )

    await state.clear()
    await callback.answer()


async def add_user_to_db(username: str, role: str, full_name: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO users (username, role, full_name) VALUES (%s, %s, %s) ON CONFLICT (username) DO UPDATE SET role = EXCLUDED.role, full_name = EXCLUDED.full_name",
            (username, role, full_name)
        )
        conn.commit()
        cur.close()
        return True
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    finally:
        if conn is not None:
            conn.close()

async def get_all_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT username, role, full_name FROM users ORDER BY created_at DESC")
        users = cur.fetchall()
        cur.close()
        return users
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []
    finally:
        if conn is not None:
            conn.close()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chat_id
        cur.execute("""
                INSERT INTO users (username, role, full_name, chat_id)
                VALUES (%s, 'student', %s, %s)
                ON CONFLICT (username) 
                DO UPDATE SET 
                    chat_id = EXCLUDED.chat_id,
                    full_name = COALESCE(EXCLUDED.full_name, users.full_name)
            """, (
            message.from_user.username,
            message.from_user.full_name or "–ê–Ω–æ–Ω–∏–º",
            message.chat.id
        ))
        conn.commit()
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id: {e}")
    finally:
        if conn:
            conn.close()
    user_role = await get_user_role_by_username(message.from_user.username)

    # –û–±—â–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
    common_buttons = [types.KeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")], [KeyboardButton(text="üöÄ /start")]

    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if message.from_user.username == ADMIN_USERNAME:
        markup = types.ReplyKeyboardMarkup(
            keyboard=[
                [
                    types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                    types.KeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                ],
                [
                    types.KeyboardButton(text="üìÖ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
                    types.KeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
                    types.KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞–º")
                ]
            ],
            resize_keyboard=True
        )
        await message.answer("‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=markup)

    # –ú–µ—Ç–æ–¥–∏—Å—Ç
    elif user_role == "methodist":
        markup = types.ReplyKeyboardMarkup(
            keyboard=[
                [
                    types.KeyboardButton(text="üìÖ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
                    types.KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞–º")
                ],
                [
                    types.KeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
                    types.KeyboardButton(text="üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")
                ],
                [
                    types.KeyboardButton(text="üë®‚Äçüéì –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"),
                    types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                ],
            ],
            resize_keyboard=True
        )
        await message.answer("üìö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–µ—Ç–æ–¥–∏—Å—Ç!", reply_markup=markup)

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏
    else:
        markup = types.ReplyKeyboardMarkup(
            keyboard=[
                [
                    types.KeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
                    types.KeyboardButton(text="üë®‚Äçüè´ –ú–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
                ],
                [types.KeyboardButton(text="üìÑ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ")]
            ],
            resize_keyboard=True
        )
        if user_role:
            await message.answer(f"üìã –ü—Ä–∏–≤–µ—Ç! –í–∞—à–∞ —Ä–æ–ª—å: {user_role}", reply_markup=markup)
        else:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ", reply_markup=markup)


@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∫–Ω–æ–ø–∫–æ–π —Å—Ç–∞—Ä—Ç"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
            [KeyboardButton(text="/start")],  # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç
            [KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        is_persistent=True
    )

    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:",
        reply_markup=keyboard
    )


@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def start_add_user(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return

    await state.set_state(AddUserStates.WAITING_USERNAME)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ '@'):")


@dp.message(AddUserStates.WAITING_USERNAME, F.text)
async def handle_username(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ username"""
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    username = message.text.strip()
    if not username:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ username (–±–µ–∑ '@')", reply_markup=types.ReplyKeyboardRemove())
        return

    # –£–¥–∞–ª—è–µ–º @ –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if username.startswith('@'):
        username = username[1:]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ username –Ω–µ –∑–∞–Ω—è—Ç —á–µ—Ä–µ–∑ –ë–î
    existing_user = await get_user_role_by_username(username)
    if existing_user and username != ADMIN_USERNAME:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å —Ä–æ–ª—å—é {existing_user}",
                           reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(username=username)
    await state.set_state(AddUserStates.WAITING_ROLE)

    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                         reply_markup=types.ReplyKeyboardMarkup(
                             keyboard=[
                                 [types.KeyboardButton(text="üë®‚Äçüéì Student")],
                                 [types.KeyboardButton(text="üë©‚Äçüè´ Teacher")],
                                 [types.KeyboardButton(text="üìö Methodist")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
                                 [types.KeyboardButton(text="üëë Admin")],
                                 [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
                             ],
                             resize_keyboard=True
                         ))


@dp.message(AddUserStates.WAITING_ROLE, F.text)
async def finish_add_user(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    user_data = await state.get_data()
    username = user_data.get("username")

    role_text = message.text.strip().lower()
    if role_text == "student" or role_text == "üë®‚Äçüéì student":
        role = "student"
    elif role_text == "teacher" or role_text == "üë©‚Äçüè´ teacher":
        role = "teacher"
    elif role_text == "admin" or role_text == "üëë admin":
        role = "admin"
    elif role_text == "methodist" or role_text == "üìö methodist" or role_text == "–º–µ—Ç–æ–¥–∏—Å—Ç":
        role = "methodist"
    elif role_text == "üîô –Ω–∞–∑–∞–¥" or role_text == "–Ω–∞–∑–∞–¥" or role_text == "back":
        await message.answer("‚ùå –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    if username is None or role is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if username == str(message.from_user.username) and message.from_user.username != ADMIN_USERNAME:
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    full_name = message.from_user.first_name or "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    success = await add_user_to_db(username, role, full_name)

    if not success:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                             reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    await message.answer(f"""
‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é {role.capitalize()}

–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é /start
""", reply_markup=types.ReplyKeyboardRemove())

    await state.clear()


async def get_user_role_by_username(username: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–∑ –ë–î"""
    if not username:
        return None
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT role FROM users WHERE username = %s", (username,))
        result = cur.fetchone()
        cur.close()
        return result[0] if result else None
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
        return None
    finally:
        if conn is not None:
            conn.close()



@dp.message(F.text == "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def cmd_view_users(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return

    users = await get_all_users()
    if not users:
        await message.answer("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º
    content = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã:\n\n" + "\n".join(
        f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:@{u} ({n})" if u == ADMIN_USERNAME else
        f"‚ú® {r.capitalize()}:@{u} ({n})" if u == message.from_user.username else
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:@{u} ({n}) - –†–æ–ª—å: {r.capitalize()}"
        for u, r, n in users
    )

    await message.answer(
        content,
        parse_mode=ParseMode.HTML
    )

async def get_schedule_list() -> list[tuple]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∏–∑ –ë–î"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT 
                semester_name, 
                start_date, 
                end_date, 
                practice_name,
                responsible_teacher
            FROM schedule 
            ORDER BY start_date DESC
        """)
        schedule = cur.fetchall()
        cur.close()
        return schedule
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {e}")
        return []
    finally:
        if conn:
            conn.close()


@dp.message(F.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def cmd_view_schedule(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"""
    schedule = await get_schedule_list()
    user_role = await get_user_role_by_username(message.from_user.username)

    if not schedule:
        await message.answer("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    response = "üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n\n"

    for idx, (semester, start_date, end_date, practice, teacher) in enumerate(schedule, 1):
        response += (
            f"{idx}. {semester}\n"
            f"   üìÜ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
            f"   üè´ –ü—Ä–∞–∫—Ç–∏–∫–∞: {practice}\n"
            f"   üë®‚Äçüè´ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: @{teacher}\n\n"
        )

        # –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è
        if user_role == 'student':
            markup = types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="üìÑ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ")],
                    [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
            await message.answer(response, reply_markup=markup)
        else:
            await message.answer(response)
async def get_students_list() -> list[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ username —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
                SELECT username, chat_id 
                FROM users 
                WHERE role = 'student' AND chat_id IS NOT NULL
            """)
        return cur.fetchall()
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {e}")
        return []
    finally:
        if conn:
            conn.close()


@dp.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞–º")
async def start_schedule_distribution(message: types.Message, state: FSMContext):
    schedules = await get_schedule_list()

    if not schedules:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return

    buttons = []
    for schedule in schedules:
        buttons.append([types.KeyboardButton(
            text=f"üìÖ {schedule[0]} ({schedule[1].strftime('%d.%m.%Y')}-{schedule[2].strftime('%d.%m.%Y')})"
        )])

    markup = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=markup)
    await state.set_state(ScheduleDistribution.select_schedule)


@dp.message(ScheduleDistribution.select_schedule)
async def select_schedule_for_distribution(message: types.Message, state: FSMContext):
    schedule_text = message.text.replace("üìÖ ", "")
    await state.update_data(selected_schedule=schedule_text)

    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")],
            [types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {schedule_text}\n"
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º?",
        reply_markup=markup
    )
    await state.set_state(ScheduleDistribution.confirm_distribution)


@dp.message(ScheduleDistribution.confirm_distribution, F.text == "‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
async def confirm_distribution(message: types.Message, state: FSMContext):
    data = await state.get_data()
    schedule_text = data['selected_schedule']
    students = await get_students_list()

    if not students:
        await message.answer("‚ùå –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        await state.clear()
        return

    success = 0
    failed = []

    for username, chat_id in students:
        try:
            await message.bot.send_message(
                chat_id=chat_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π chat_id
                text=f"üì¢ –ü—Ä–∞–∫—Ç–∏–∫–∏, –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤ —ç—Ç–æ–º —Å–µ–º–µ—Å—Ç—Ä–µ:\n\n{schedule_text}"
            )
            success += 1
        except Exception as e:
            failed.append(f"{username}: {str(e)}")
            continue

    # –û—Ç—á—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    report = (
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚Ä¢ –û—à–∏–±–∫–∏: {len(failed)}"
    )

    if failed:
        report += "\n\n–û—à–∏–±–∫–∏:\n" + "\n".join(f"‚Üí {f}" for f in failed[:5])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
        if len(failed) > 5:
            report += f"\n...–∏ –µ—â—ë {len(failed) - 5} –æ—à–∏–±–æ–∫"

    await message.answer(report, reply_markup=types.ReplyKeyboardRemove())
    await state.clear()

@dp.message(ScheduleDistribution.confirm_distribution, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_distribution(message: types.Message, state: FSMContext):
    await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()

@dp.callback_query(F.data == "unassign_teacher_menu")
async def unassign_teacher_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç—ã —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏)"""
    students_with_teachers = await get_students_with_teachers_only()

    if not students_with_teachers:
        await callback.answer("‚ÑπÔ∏è –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö –∏ –∏—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"üë®‚Äçüéì {student_name} ‚Üí üë®‚Äçüè´ {teacher_name}",
            callback_data=f"confirm_unassign_{student_username}"
        )]
        for student_username, student_name, _, teacher_name in
        students_with_teachers
    ] + [
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="teacher_management"
        )]
    ])

    await callback.message.edit_text(
        "üë®‚Äçüéì –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n"
        "(–§–æ—Ä–º–∞—Ç: –°—Ç—É–¥–µ–Ω—Ç ‚Üí –¢–µ–∫—É—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.message(F.text == "üë®‚Äçüéì –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
async def show_all_students(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    user_role = await get_user_role_by_username(message.from_user.username)


    students = await get_all_students_with_teachers()

    if not students:
        await message.answer("üìã –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.")
        return

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º
    grouped = {}
    for username, full_name, teacher_username, teacher_name in students:
        key = teacher_name or "‚ùå –ë–µ–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
        if key not in grouped:
            grouped[key] = []
        grouped[key].append((username, full_name))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = ["üìä <b>–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:</b>"]
    for teacher, student_list in grouped.items():
        response.append(f"\nüë®‚Äçüè´ <b>{teacher}</b>:")
        for username, full_name in student_list:
            response.append(f"‚Ä¢ {full_name} (@{username})")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üîÑ –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                callback_data="assign_teacher_menu"
            ),
            InlineKeyboardButton(
                text="‚ùå –°–Ω—è—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                callback_data="unassign_teacher_menu"
            ),
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                callback_data="refresh_students"
            )
        ]
    ])

    await message.answer(
        "\n".join(response),
        parse_mode="HTML",
        reply_markup=keyboard
    )



async def get_current_teacher(student_username: str) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT u.username, u.full_name
            FROM users u
            JOIN student_teacher st ON u.username = st.teacher_username
            WHERE st.student_username = %s
        """, (student_username,))
        result = cur.fetchone()
        return {
            'username': result[0],
            'full_name': result[1]
        } if result else None
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
        return None
    finally:
        if conn:
            conn.close()
@dp.callback_query(F.data == "teacher_management")
async def teacher_management(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏"""
    await show_all_students(callback.message)
    await callback.answer()


@dp.callback_query(F.data.startswith("confirm_unassign_"))
async def confirm_unassign(callback: types.CallbackQuery):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    try:
        student_username = callback.data.split("_")[2]
        print(f"[DEBUG] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–∏—è –¥–ª—è @{student_username}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑
        student_info = await get_user_info(student_username)
        current_teacher = await get_current_teacher(student_username)

        if not student_info:
            await callback.answer("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return await callback.message.edit_text(
                "‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="teacher_management")
                ]])
            )

        if not current_teacher:
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", show_alert=True)
            return await callback.message.edit_text(
                f"‚ÑπÔ∏è –£ @{student_username} –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="teacher_management")
                ]])
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–Ω—è—Ç–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n\n"
            f"–°—Ç—É–¥–µ–Ω—Ç: @{student_username}\n"
            f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {current_teacher['full_name']} (@{current_teacher['username']})"
        )

        # –ü—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –°–Ω—è—Ç—å",
                    callback_data=f"execute_unassign_{student_username}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="teacher_management"
                )
            ]
        ])

        await callback.message.edit_text(text, reply_markup=markup)
        await callback.answer()

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)


@dp.callback_query(F.data.startswith("execute_unassign_"))
async def execute_unassign(callback: types.CallbackQuery):
    """–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    try:
        student_username = callback.data.split("_")[2]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_info = await get_user_info(student_username)
        if not student_info:
            await callback.answer("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return await callback.message.edit_text(
                "‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="teacher_management")
                ]])
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        current_teacher = await get_current_teacher(student_username)
        if not current_teacher:
            await callback.answer("‚ÑπÔ∏è –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", show_alert=True)
            return await callback.message.edit_text(
                f"‚ÑπÔ∏è –£ @{student_username} –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="teacher_management")
                ]])
            )

        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = None
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("""
                DELETE FROM student_teacher 
                WHERE student_username = %s
                RETURNING 1
            """, (student_username,))

            if not cur.fetchone():
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", show_alert=True)
                return

            conn.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            student_chat_id = await get_user_chat_id(student_username)
            if student_chat_id:
                try:
                    await bot.send_message(
                        chat_id=student_chat_id,
                        text=f"‚ÑπÔ∏è –° –≤–∞—Å —Å–Ω—è—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏: {current_teacher['full_name']} (@{current_teacher['username']})"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {current_teacher['full_name']} —Å–Ω—è—Ç —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ @{student_username}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="teacher_management")
                ]])
            )

        except Error as e:
            print(f"[DB ERROR] –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"confirm_unassign_{student_username}"),
                    InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="teacher_management")
                ]])
            )
        finally:
            if conn:
                conn.close()

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@dp.callback_query(F.data.startswith("cancel_unassign_"))
async def cancel_unassign(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–Ω—è—Ç–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    student_username = callback.data.split("_")[2]

    await callback.message.edit_text(
        f"‚ùé –°–Ω—è—Ç–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è @{student_username} –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="teacher_management")
        ]])
    )
    await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


@dp.callback_query(F.data.startswith("refresh_unassign_"))
async def refresh_unassign(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–Ω—è—Ç–∏–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    try:
        student_username = callback.data.split("_")[2]
        print(f"[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è @{student_username}")

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        student_info = await get_user_info(student_username)
        current_teacher = await get_current_teacher(student_username)

        if not student_info:
            await callback.answer("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return await callback.message.edit_text(
                "‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="unassign_teacher_menu")
                ]])
            )

        if not current_teacher:
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", show_alert=True)
            return await callback.message.edit_text(
                f"‚ÑπÔ∏è –£ @{student_username} –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"refresh_unassign_{student_username}"),
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="unassign_teacher_menu")
                ]])
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        await callback.message.edit_text(
            f"üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n\n"
            f"–°—Ç—É–¥–µ–Ω—Ç: @{student_username}\n"
            f"–¢–µ–∫—É—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {current_teacher['full_name']} (@{current_teacher['username']})\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–Ω—è—Ç–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞, —Å–Ω—è—Ç—å", callback_data=f"execute_unassign_{student_username}"),
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"cancel_unassign_{student_username}")
                ],
                [
                    InlineKeyboardButton(text="üîÑ –ï—â—ë —Ä–∞–∑ –æ–±–Ω–æ–≤–∏—Ç—å",
                                         callback_data=f"refresh_unassign_{student_username}")
                ]
            ])
        )
        await callback.answer("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"refresh_unassign_{student_username}"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="unassign_teacher_menu")
            ]])
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)



async def get_all_students_with_teachers() -> list[tuple]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ –∏ –±–µ–∑)"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT 
                s.username as student_username,
                s.full_name as student_name,
                t.username as teacher_username, 
                t.full_name as teacher_name
            FROM users s
            LEFT JOIN student_teacher st ON s.username = st.student_username
            LEFT JOIN users t ON st.teacher_username = t.username
            WHERE s.role = 'student'
            ORDER BY s.username
        """)
        return cur.fetchall()
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {e}")
        return []
    finally:
        if conn:
            conn.close()

async def get_students_with_teachers_only() -> list[tuple]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT 
                s.username as student_username,
                s.full_name as student_name,
                t.username as teacher_username, 
                t.full_name as teacher_name
            FROM users s
            JOIN student_teacher st ON s.username = st.student_username
            JOIN users t ON st.teacher_username = t.username
            WHERE s.role = 'student'
            ORDER BY s.username
        """)
        return cur.fetchall()
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏: {e}")
        return []
    finally:
        if conn:
            conn.close()


@dp.callback_query(F.data == "assign_teacher_menu")
async def assign_teacher_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    students = await get_students_without_teachers()

    if not students:
        await callback.answer("‚úÖ –£ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –µ—Å—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{full_name} (@{username})",
            callback_data=f"assign_student_{username}"
        )]
        for username, full_name in students
    ])

    await callback.message.edit_text(
        "üë®‚Äçüéì –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=keyboard
    )
    await callback.answer()
@dp.callback_query(F.data.startswith("assign_student_"))
async def select_student_for_teacher(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    student_username = callback.data.split("_")[2]
    teachers = await get_teachers_list()

    if not teachers:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{full_name} (@{username})",
            callback_data=f"confirm_assign_{student_username}_{username}"
        )]
        for username, full_name in teachers
    ])

    await callback.message.edit_text(
        f"üë®‚Äçüè´ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ @{student_username}:",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("confirm_assign_"))
async def confirm_teacher_assignment(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    _, _, student_username, teacher_username = callback.data.split("_")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    student_info = await get_user_info(student_username)
    teacher_info = await get_user_info(teacher_username)

    if not student_info or not teacher_info:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        cur.execute("""
            DELETE FROM student_teacher 
            WHERE student_username = %s
        """, (student_username,))

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        cur.execute("""
            INSERT INTO student_teacher (student_username, teacher_username)
            VALUES (%s, %s)
        """, (student_username, teacher_username))

        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await notify_assignment(student_username, teacher_username)

        await callback.message.edit_text(
            f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å @{teacher_username} –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ @{student_username}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="üîô –ö —Å–ø–∏—Å–∫—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
                    callback_data="refresh_students"
                )
            ]])
        )

    except Error as e:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
            reply_markup=None
        )
        print(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        if conn:
            conn.close()
    await callback.answer()

async def notify_assignment(student_username: str, teacher_username: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é"""
    student_chat_id = await get_user_chat_id(student_username)
    teacher_chat_id = await get_user_chat_id(teacher_username)

    student_info = await get_user_info(student_username)
    teacher_info = await get_user_info(teacher_username)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
    if student_chat_id:
        try:
            await bot.send_message(
                chat_id=student_chat_id,
                text=f"üë®‚Äçüè´ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {teacher_info['full_name']} (@{teacher_username})"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
    if teacher_chat_id:
        try:
            await bot.send_message(
                chat_id=teacher_chat_id,
                text=f"üë®‚Äçüéì –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç: {student_info['full_name']} (@{student_username})"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")

async def delete_assignment(student_username: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Å–≤—è–∑—å —Å—Ç—É–¥–µ–Ω—Ç-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            DELETE FROM student_teacher 
            WHERE student_username = %s
            RETURNING 1
        """, (student_username,))
        conn.commit()
        return bool(cur.fetchone())
    except Error as e:
        print(f"[DB ERROR] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏: {e}")
        return False
    finally:
        if conn:
            conn.close()


@dp.callback_query(F.data.startswith("execute_unassign_"))
async def execute_unassign(callback: types.CallbackQuery):
    """–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    try:
        student_username = callback.data.split("_")[2]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_info = await get_user_info(student_username)
        if not student_info:
            await callback.answer("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return await callback.message.edit_text(
                "‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="teacher_management")
                ]])
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        current_teacher = await get_current_teacher(student_username)
        if not current_teacher:
            await callback.answer("‚ÑπÔ∏è –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", show_alert=True)
            return await callback.message.edit_text(
                f"‚ÑπÔ∏è –£ @{student_username} –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="teacher_management")
                ]])
            )

        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = None
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("""
                DELETE FROM student_teacher 
                WHERE student_username = %s
                RETURNING 1
            """, (student_username,))

            if not cur.fetchone():
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", show_alert=True)
                return

            conn.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            student_chat_id = await get_user_chat_id(student_username)
            if student_chat_id:
                try:
                    await bot.send_message(
                        chat_id=student_chat_id,
                        text=f"‚ÑπÔ∏è –° –≤–∞—Å —Å–Ω—è—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏: {current_teacher['full_name']} (@{current_teacher['username']})"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {current_teacher['full_name']} —Å–Ω—è—Ç —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ @{student_username}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="teacher_management")
                ]])
            )

        except Error as e:
            print(f"[DB ERROR] –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"confirm_unassign_{student_username}"),
                    InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="teacher_management")
                ]])
            )
        finally:
            if conn:
                conn.close()

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data == "refresh_students")
async def refresh_students_list(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞...")
    await show_all_students(callback.message)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è
@dp.message(F.text == "üìÑ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ")
async def start_application(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è"""
    await message.answer(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞—è–≤–ª–µ–Ω–∏–µ–º (PDF, DOCX, JPG, PNG):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(ApplicationStates.WAITING_APPLICATION_FILE)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
@dp.message(ApplicationStates.WAITING_APPLICATION_FILE, F.document | F.photo)
async def handle_application_file(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∑–∞—è–≤–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞"""
    file_info = {
        'file_id': None,
        'file_name': "application",
        'file_type': None  # 'document' –∏–ª–∏ 'photo'
    }

    if message.document:
        file_info.update({
            'file_id': message.document.file_id,
            'file_name': message.document.file_name or "document",
            'file_type': 'document'
        })
    elif message.photo:
        file_info.update({
            'file_id': message.photo[-1].file_id,  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            'file_name': f"photo_{message.photo[-1].file_unique_id}.jpg",
            'file_type': 'photo'
        })

    if not file_info['file_id']:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    await state.update_data({
        **file_info,
        'student_username': message.from_user.username,
        'student_full_name': message.from_user.full_name
    })

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")],
            [types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        f"üìÑ –§–∞–π–ª '{file_info['file_name']}' ({file_info['file_type']}) –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ—Ç–æ–¥–∏—Å—Ç—É.\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
        reply_markup=markup
    )
    await state.set_state(ApplicationStates.WAITING_APPLICATION_CONFIRM)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
@dp.message(ApplicationStates.WAITING_APPLICATION_CONFIRM, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")
async def confirm_application(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    methodists = await get_methodists_list()

    if not methodists:
        await message.answer("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏")
        await state.clear()
        return

    success = 0
    for methodist_username, methodist_chat_id in methodists:
        try:
            caption = (
                f"üì® –ù–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞:\n"
                f"üë§ {data['student_full_name']} (@{data['student_username']})\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )

            if data['file_type'] == 'document':
                await bot.send_document(
                    chat_id=methodist_chat_id,
                    document=data['file_id'],
                    caption=caption
                )
            elif data['file_type'] == 'photo':
                await bot.send_photo(
                    chat_id=methodist_chat_id,
                    photo=data['file_id'],
                    caption=caption
                )
            success += 1

        except exceptions.TelegramBadRequest as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç–æ–¥–∏—Å—Ç—É {methodist_username} (chat_id: {methodist_chat_id}): {e}")
            continue

    if success > 0:
        await message.answer(
            f"‚úÖ –í–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success} –º–µ—Ç–æ–¥–∏—Å—Ç–∞–º!",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∏ –æ–¥–Ω–æ–º—É –º–µ—Ç–æ–¥–∏—Å—Ç—É",
            reply_markup=types.ReplyKeyboardRemove()
        )

    await state.clear()
#—Ç–µ—Å—Ç –ø—É—à
# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def get_user_info(username: str) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
                SELECT full_name, chat_id 
                FROM users 
                WHERE username = %s
            """, (username,))
        result = cur.fetchone()
        if result:
            return {'full_name': result[0], 'chat_id': result[1]}
        return None
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None
    finally:
        if conn:
            conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@dp.message(ApplicationStates.WAITING_APPLICATION_CONFIRM, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_application(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–∞—á—É –∑–∞—è–≤–ª–µ–Ω–∏—è"""
    await message.answer(
        "‚ùå –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.clear()


# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤
async def get_methodists_list() -> list[tuple]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤ —Å chat_id"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT username, chat_id 
            FROM users 
            WHERE role = 'methodist' AND chat_id IS NOT NULL
        """)
        return cur.fetchall()
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤: {e}")
        return []
    finally:
        if conn:
            conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ—Ç–æ–¥–∏—Å—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è
@dp.message(F.document | F.photo)
async def handle_application_from_student(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –º–µ—Ç–æ–¥–∏—Å—Ç–∞"""
    user_role = await get_user_role_by_username(message.from_user.username)

    if user_role != 'methodist':
        return  # –¢–æ–ª—å–∫–æ –¥–ª—è –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å—å —Å username —Å—Ç—É–¥–µ–Ω—Ç–∞
    if message.caption and '@' in message.caption:
        student_username = None
        for part in message.caption.split():
            if part.startswith('@'):
                student_username = part[1:]
                break

        if student_username:
            await state.update_data(student_username=student_username)
            await start_assign_teacher_process(message, state)
            return

    # –ï—Å–ª–∏ username –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:")
    await show_students_list(message, state)
    await state.set_state(AssignTeacherStates.WAITING_STUDENT_SELECTION)


async def show_students_list(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    students = await get_students_without_teachers()

    if not students:
        await message.answer("‚ùå –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–µ–∑ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π")
        await state.clear()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{full_name} (@{username})", callback_data=f"assign_student_{username}")]
        for username, full_name in students
    ])

    await message.answer("üë®‚Äçüéì –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞:", reply_markup=keyboard)


async def get_students_without_teachers() -> list[tuple]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT u.username, u.full_name 
            FROM users u
            LEFT JOIN student_teacher st ON u.username = st.student_username
            WHERE u.role = 'student' AND st.teacher_username IS NULL
            ORDER BY u.username
        """)
        return cur.fetchall()
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []
    finally:
        if conn:
            conn.close()



async def start_assign_teacher_process(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    teachers = await get_teachers_list()

    if not teachers:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
        await state.clear()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{full_name} (@{username})", callback_data=f"assign_teacher_{username}")]
        for username, full_name in teachers
    ])

    await message.answer("üë®‚Äçüè´ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
    await state.set_state(AssignTeacherStates.WAITING_TEACHER_SELECTION)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
@dp.callback_query(AssignTeacherStates.WAITING_STUDENT_SELECTION, F.data.startswith("assign_student_"))
async def process_student_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    student_username = callback.data.split("_")[2]
    await state.update_data(student_username=student_username)

    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç: @{student_username}")
    await start_assign_teacher_process(callback.message, state)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@dp.callback_query(AssignTeacherStates.WAITING_TEACHER_SELECTION, F.data.startswith("assign_teacher_"))
async def process_teacher_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    teacher_username = callback.data.split("_")[2]
    data = await state.get_data()
    student_username = data.get('student_username')

    if not student_username:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
    student_info = await get_user_info(student_username)
    teacher_info = await get_user_info(teacher_username)

    if not student_info or not teacher_info:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    await state.update_data(teacher_username=teacher_username)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_text = (
        "üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ:\n\n"
        f"üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç: {student_info['full_name']} (@{student_username})\n"
        f"üë®‚Äçüè´ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {teacher_info['full_name']} (@{teacher_username})\n\n"
        "–ù–∞–∑–Ω–∞—á–∏—Ç—å —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞?"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_assignment"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_assignment")
        ]
    ])

    await callback.message.edit_text(confirm_text, reply_markup=keyboard)
    await state.set_state(AssignTeacherStates.CONFIRM_ASSIGNMENT)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
@dp.callback_query(AssignTeacherStates.CONFIRM_ASSIGNMENT, F.data == "confirm_assignment")
async def confirm_assignment(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    student_username = data.get('student_username')
    teacher_username = data.get('teacher_username')

    if not student_username or not teacher_username:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        cur.execute("""
            DELETE FROM student_teacher 
            WHERE student_username = %s
        """, (student_username,))

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        cur.execute("""
            INSERT INTO student_teacher (student_username, teacher_username)
            VALUES (%s, %s)
        """, (student_username, teacher_username))

        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
        student_chat_id = await get_user_chat_id(student_username)
        teacher_info = await get_user_info(teacher_username)

        if student_chat_id:
            try:
                await bot.send_message(
                    chat_id=student_chat_id,
                    text=f"üë®‚Äçüè´ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏: {teacher_info['full_name']} (@{teacher_username})"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É: {e}")

        await callback.message.edit_text(
            "‚úÖ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω!",
            reply_markup=None
        )

    except Error as e:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
            reply_markup=None
        )
        print(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è: {e}")
    finally:
        if conn:
            conn.close()
        await state.clear()
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
@dp.callback_query(AssignTeacherStates.CONFIRM_ASSIGNMENT, F.data == "cancel_assignment")
async def cancel_assignment(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=None
    )
    await state.clear()
    await callback.answer()


async def get_user_chat_id(username: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT chat_id FROM users WHERE username = %s
        """, (username,))
        result = cur.fetchone()
        return result[0] if result else None
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id: {e}")
        return None
    finally:
        if conn:
            conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
@dp.message(F.text == "üë®‚Äçüè´ –ú–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
async def show_my_teacher(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ"""
    student_username = message.from_user.username
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT u.username, u.full_name 
            FROM student_teacher st
            JOIN users u ON st.teacher_username = u.username
            WHERE st.student_username = %s
        """, (student_username,))
        teacher = cur.fetchone()

        if teacher:
            username, full_name = teacher
            await message.answer(
                f"üë®‚Äçüè´ –í–∞—à —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏:\n"
                f"{full_name} (@{username})\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
            )
        else:
            await message.answer(
                "‚ùå –í–∞–º –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏.\n"
                "–ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."
            )
    except Error as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        if conn:
            conn.close()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{ADMIN_USERNAME}")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())