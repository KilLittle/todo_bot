import asyncio
import psycopg2
from aiogram import Bot, Dispatcher, types, F, exceptions
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime, date
from psycopg2 import sql, Error
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineQueryResultArticle, InputTextMessageContent
from aiogram.fsm.state import State, StatesGroup

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = "8010104498:AAFu41LIYHrPWWl-kvT1pQ0GZrxE8AL0wZE"
ADMIN_USERNAME = ""
DATE_FORMAT = "%d.%m.%Y"
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
DB_CONFIG = {
    "dbname": "postgres",
    "user": "postgres",
    "password": "admin",
    "host": "localhost",
    "port": "5433"
}
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
def get_db_connection():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        return conn
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return None





# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class AddUserStates(StatesGroup):
    WAITING_USERNAME = State()
    WAITING_ROLE = State()

class ScheduleStates(StatesGroup):
    WAITING_SEMESTER_NAME = State()
    WAITING_START_DATE = State()
    WAITING_END_DATE = State()
    WAITING_PRACTICE_NAME = State()
    WAITING_PRACTICE_DESC = State()
    WAITING_TEACHER = State()
    CONFIRMATION = State()
class ScheduleDistribution(StatesGroup):
    select_schedule = State()
    confirm_distribution = State()
class ApplicationStates(StatesGroup):
    WAITING_APPLICATION_FILE = State()
    WAITING_APPLICATION_CONFIRM = State()

class AssignTeacherStates(StatesGroup):
    WAITING_STUDENT_SELECTION = State()
    WAITING_TEACHER_SELECTION = State()
    CONFIRM_ASSIGNMENT = State()

class AssignmentStates(StatesGroup):
    WAITING_STUDENT_SELECTION = State()
    WAITING_TITLE = State()
    WAITING_DESCRIPTION = State()
    WAITING_DEADLINE = State()
    WAITING_FILE = State()
    CONFIRMATION = State()

@dp.message(F.text == "üìÖ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def cmd_add_schedule(message: types.Message, state: FSMContext):
    """–ò–Ω–∏—Ü–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    if not await get_user_role_by_username(message.from_user.username):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–∏—Å—Ç–∞–º", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return



    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º–µ—Å—Ç—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û—Å–µ–Ω–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä 2025'):",

    )
    await state.set_state(ScheduleStates.WAITING_SEMESTER_NAME)




@dp.message(ScheduleStates.WAITING_SEMESTER_NAME)
async def process_semester_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º–µ—Å—Ç—Ä–∞"""
    if len(message.text) > 100:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(semester_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(ScheduleStates.WAITING_START_DATE)


@dp.message(ScheduleStates.WAITING_START_DATE)
async def process_start_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞"""
    try:
        start_date = datetime.strptime(message.text, "%d.%m.%Y").date()

        await state.update_data(start_date=start_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ–º–µ—Å—Ç—Ä–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
        await state.set_state(ScheduleStates.WAITING_END_DATE)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")


@dp.message(ScheduleStates.WAITING_END_DATE)
async def process_end_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ–º–µ—Å—Ç—Ä–∞"""
    try:
        data = await state.get_data()
        start_date = data.get('start_date')
        end_date = datetime.strptime(message.text, "%d.%m.%Y").date()

        if end_date <= start_date:
            await message.answer("‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        await state.update_data(end_date=end_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞'):")
        await state.set_state(ScheduleStates.WAITING_PRACTICE_NAME)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")


@dp.message(ScheduleStates.WAITING_PRACTICE_NAME)
async def process_practice_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏"""
    if len(message.text) > 200:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(practice_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ '-'):")
    await state.set_state(ScheduleStates.WAITING_PRACTICE_DESC)

async def get_teachers_list() -> list[tuple]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT username,full_name 
            FROM users 
            WHERE role = 'teacher' 
            ORDER BY username
        """)
        teachers = cur.fetchall()
        cur.close()
        return teachers
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []
    finally:
        if conn:
            conn.close()


@dp.message(ScheduleStates.WAITING_PRACTICE_DESC)
async def process_practice_desc(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    practice_desc = None if message.text == "-" else message.text
    await state.update_data(practice_description=practice_desc)

    teachers = await get_teachers_list()
    if not teachers:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{full_name} (@{username})", callback_data=f"teacher_{username}")]
        for username, full_name in teachers
    ])

    await message.answer(
        "üë®‚Äçüè´ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=keyboard
    )
    await state.set_state(ScheduleStates.WAITING_TEACHER)




@dp.inline_query()
async def inline_teacher_search(inline_query: types.InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    query = inline_query.query.lower().strip()
    if not query:
        return

    teachers = await get_teachers_list()
    results = [
        InlineQueryResultArticle(
            id=username,
            title=full_name,
            input_message_content=InputTextMessageContent(
                message_text=f"–í—ã–±—Ä–∞–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {full_name}"
            )
        )
        for username, full_name in teachers
        if query in full_name.lower() or query in username.lower()
    ]



    await inline_query.answer(results)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏
@dp.callback_query(ScheduleStates.WAITING_TEACHER, F.data.startswith("teacher_"))
async def process_teacher_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    username = callback.data.split("_")[1]
    teacher_data = next((t for t in await get_teachers_list() if t[0] == username), None)

    if not teacher_data:
        await callback.answer("‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    username, full_name = teacher_data
    await state.update_data(responsible_teacher=username)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
    data = await state.get_data()
    confirm_text = (
        "üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n\n"
        f"–°–µ–º–µ—Å—Ç—Ä: {data['semester_name']}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {data['start_date'].strftime('%d.%m.%Y')}\n"
        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {data['end_date'].strftime('%d.%m.%Y')}\n"
        f"–ü—Ä–∞–∫—Ç–∏–∫–∞: {data['practice_name']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['practice_description'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {full_name} (@{username})\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )

    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_schedule"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_schedule")
        ]
    ])

    await callback.message.edit_text(confirm_text, reply_markup=confirm_keyboard)
    await state.set_state(ScheduleStates.CONFIRMATION)
    await callback.answer()


@dp.callback_query(ScheduleStates.CONFIRMATION, F.data == "confirm_schedule")
async def confirm_schedule(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    data = await state.get_data()

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute(
            """INSERT INTO schedule 
            (semester_name, start_date, end_date, practice_name, practice_description, responsible_teacher, created_by) 
            VALUES (%s, %s, %s, %s, %s, %s, %s)""",
            (
                data['semester_name'],
                data['start_date'],
                data['end_date'],
                data['practice_name'],
                data['practice_description'],
                data['responsible_teacher'],
                callback.from_user.username
            )
        )
        conn.commit()

        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é /start",
            reply_markup=None  # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await callback.message.answer(
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É",
            reply_markup=types.ReplyKeyboardRemove()
        )
    except Error as e:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
            reply_markup=None
        )
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    finally:
        if conn:
            conn.close()
        await state.clear()
    await callback.answer()


@dp.message(ScheduleStates.CONFIRMATION)
async def process_confirmation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    if message.text.lower() not in ["–¥–∞", "yes", "‚úÖ –¥–∞"]:
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute(
            """INSERT INTO schedule 
            (semester_name, start_date, end_date, practice_name, practice_description, responsible_teacher, created_by) 
            VALUES (%s, %s, %s, %s, %s, %s, %s)""",
            (
                data['semester_name'],
                data['start_date'],
                data['end_date'],
                data['practice_name'],
                data['practice_description'],
                data['responsible_teacher'],
                message.from_user.username
            )
        )
        conn.commit()

        await message.answer(
            "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é /start",
            reply_markup=types.ReplyKeyboardRemove()
        )
    except Error as e:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    finally:
        if conn:
            conn.close()
        await state.clear()


dp.callback_query(ScheduleStates.CONFIRMATION, F.data == "cancel_schedule")


async def cancel_schedule(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    await callback.message.edit_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=None  # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await callback.message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
        reply_markup=types.ReplyKeyboardRemove()
    )

    await state.clear()
    await callback.answer()


async def add_user_to_db(username: str, role: str, full_name: str = None):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO users (username, role, full_name) VALUES (%s, %s, %s) "
            "ON CONFLICT (username) DO UPDATE SET role = EXCLUDED.role, full_name = EXCLUDED.full_name",
            (username, role, full_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")  # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        )
        conn.commit()
        cur.close()
        return True
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    finally:
        if conn is not None:
            conn.close()


async def get_all_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT username, role, full_name FROM users ORDER BY created_at DESC")
        users = cur.fetchall()
        cur.close()
        return users
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []
    finally:
        if conn is not None:
            conn.close()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):

    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()

        cur.execute("""
            INSERT INTO users (username, role, full_name, chat_id)
            VALUES (%s, 'student', %s, %s)
            ON CONFLICT (username) 
            DO UPDATE SET 
                chat_id = EXCLUDED.chat_id,
                full_name = EXCLUDED.full_name
        """, (
            message.from_user.username,
            message.from_user.full_name or "–ê–Ω–æ–Ω–∏–º",
            message.chat.id
        ))
        conn.commit()
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    finally:
        if conn:
            conn.close()


    try:
        user_role = await get_user_role_by_username(message.from_user.username)
        if not user_role:
            await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–π —Ä–æ–ª–∏")
        return

    markup = types.ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)

    if user_role == "admin":
        markup.keyboard = [
            [types.KeyboardButton(text="üîÑ –°—Ç–∞—Ä—Ç"),
             types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
            [types.KeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")]
        ]
        await message.answer("‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=markup)

    elif user_role == "methodist":
        markup.keyboard = [
            [types.KeyboardButton(text="üîÑ –°—Ç–∞—Ä—Ç"),
             types.KeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
            [types.KeyboardButton(text="üìÖ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
             types.KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞–º")],
            [types.KeyboardButton(text="üë®‚Äçüéì –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"),
             types.KeyboardButton(text="üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")]
        ]
        await message.answer("üìö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–µ—Ç–æ–¥–∏—Å—Ç!", reply_markup=markup)

    elif user_role == "teacher":
        markup.keyboard = [
            [types.KeyboardButton(text="üîÑ –°—Ç–∞—Ä—Ç"),
             types.KeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
            [types.KeyboardButton(text="üë®‚Äçüéì –ú–æ–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã"),
             types.KeyboardButton(text="üìù –ó–∞–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")]
        ]
        await message.answer("üë®‚Äçüè´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å!", reply_markup=markup)

    elif user_role == "student":
        markup.keyboard = [
            [types.KeyboardButton(text="üîÑ –°—Ç–∞—Ä—Ç"),
             types.KeyboardButton(text="üë®‚Äçüè´ –ú–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")],
            [types.KeyboardButton(text="üìÑ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ"),
             types.KeyboardButton(text="üìù –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ")],
            [types.KeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")]
        ]
        await message.answer("üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å—Ç—É–¥–µ–Ω—Ç!", reply_markup=markup)

    else:
        await message.answer("‚ùå –í–∞—à–∞ —Ä–æ–ª—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞", reply_markup=types.ReplyKeyboardRemove())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç" (–¥—É–±–ª–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª /start)
@dp.message(F.text == "üîÑ –°—Ç–∞—Ä—Ç")
async def handle_start_button(message: types.Message):
    # –í—ã–∑—ã–≤–∞–µ–º —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ –∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    await cmd_start(message)

async def get_assignment_info(student_username: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –ë–î"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT  file_name, file_content, created_by, status 
            FROM assignment_tasks 
            WHERE student_username = %s
        """, (student_username,))
        result = cur.fetchone()

        if result:
            return {
                'file_name': result[0],
                'file_content': result[1],
                'created_by': result[2],
                'status': result[3]
            }
        return None
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
        return None
    finally:
        if conn:
            conn.close()


async def download_assignment(assignment_id: int, chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT file_content, title 
            FROM assignment_tasks 
            WHERE id = %s
        """, (assignment_id,))
        result = cur.fetchone()

        if result:
            file_content, title = result
            await bot.send_document(
                chat_id=chat_id,
                document=types.BufferedInputFile(
                    file=file_content,
                    filename=f"{title}.pdf"
                ),
                caption=f"üìÑ –í–∞—à–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {title}"
            )
            return True
        return False
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
        return False
    finally:
        if conn:
            conn.close()




async def get_teacher_assignments(teacher_username: str) -> list[tuple]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT a.student_username, a.title, a.deadline 
            FROM assignment_tasks a
            JOIN users u ON a.student_username = u.username
            WHERE a.teacher_username = %s AND a.status = 'assigned'
            ORDER BY a.deadline
        """, (teacher_username,))
        return cur.fetchall()
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
        return []
    finally:
        if conn:
            conn.close()


@dp.callback_query(F.data == "view_assignments")
async def view_assignments(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é"""
    user_role = await get_user_role_by_username(callback.from_user.username)

    if user_role != 'teacher':
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    students = await get_teacher_students(callback.from_user.username)

    if not students:
        await callback.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏")
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    full_text = "üìö –ó–∞–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n"

    # Split students into chunks of 10 to avoid long text
    for i in range(0, len(students), 10):
        chunk = students[i:i + 10]
        for student in chunk:
            full_text += await format_assignments_per_student({
                'username': student[0],
                'full_name': student[1],
                'chat_id': student[2]
            })

        if i + 10 < len(students):  # Add separator only if there are more students
            full_text += "\n---\n"

    # Send the text to the user (limited to 4096 characters)
    if len(full_text) > 4096:
        # For very long texts, split into multiple messages
        pass  # Add splitting logic here

    await callback.message.answer(full_text)
    await callback.answer()


async def get_teacher_students(teacher_username: str) -> list[tuple]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT s.username, s.full_name, u.chat_id
            FROM students st
            JOIN users s ON st.student_username = s.username
            WHERE st.teacher_username = %s
        """, (teacher_username,))
        return cur.fetchall()
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
        return []
    finally:
        if conn:
            conn.close()

@dp.callback_query(F.data == "check_submitted")
async def check_submitted_N(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT a.student_username, a.title, a.submitted_date 
            FROM assignment_tasks a
            WHERE a.teacher_username = %s AND a.status = 'submitted'
            ORDER BY a.submitted_date DESC
        """, (callback.from_user.username,))
        assignments = cur.fetchall()

        if not assignments:
            await callback.answer("‚ÑπÔ∏è –ù–µ—Ç —Å–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
            return

        response = ["üì§ –°–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:"]
        for idx, (student, title, submitted_date) in enumerate(assignments, 1):
            response.append(
                f"{idx}. {title}\n"
                f"   üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç: @{student}\n"
                f"   üìÖ –î–∞—Ç–∞ —Å–¥–∞—á–∏: {submitted_date.strftime('%d.%m.%Y')}"
            )

        await callback.message.edit_text("\n".join(response))

    except Error as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π")
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {e}")
    finally:
        if conn:
            conn.close()
    await callback.answer()


@dp.callback_query(F.data == "tasks_statistics")
async def show_tasks_statistics(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞–Ω–∏—è–º"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cur.execute("""
            SELECT 
                COUNT(*) as total,
                SUM(CASE WHEN status = 'assigned' THEN 1 ELSE 0 END) as assigned,
                SUM(CASE WHEN status = 'submitted' THEN 1 ELSE 0 END) as submitted,
                SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed
            FROM assignment_tasks
            WHERE teacher_username = %s
        """, (callback.from_user.username,))
        stats = cur.fetchone()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö
        cur.execute("""
            SELECT COUNT(*) 
            FROM assignment_tasks 
            WHERE teacher_username = %s 
            AND status = 'assigned' 
            AND deadline < CURRENT_DATE
        """, (callback.from_user.username,))
        overdue = cur.fetchone()[0]

        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º:\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {stats[0]}\n"
            f"‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {stats[1]}\n"
            f"‚Ä¢ –°–¥–∞–Ω–æ: {stats[2]}\n"
            f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats[3]}\n"
            f"‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {overdue}"
        )

        await callback.message.edit_text(response)

    except Error as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    finally:
        if conn:
            conn.close()
    await callback.answer()


async def get_teacher_students(teacher_username: str) -> list[tuple[str, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    [(username1, full_name1), (username2, full_name2), ...]

    Args:
        teacher_username: –õ–æ–≥–∏–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è

    Returns:
        –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (username —Å—Ç—É–¥–µ–Ω—Ç–∞, –ø–æ–ª–Ω–æ–µ –∏–º—è)
    """
    conn = None
    try:
        conn = get_db_connection()  # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–≤–∞—à —Ç–µ–∫—É—â–∏–π –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç psycopg2)
        cur = conn.cursor()

        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        cur.execute("""
            SELECT s.username, s.full_name 
            FROM student_teacher st
            JOIN users s ON st.student_username = s.username
            WHERE st.teacher_username = %s
            ORDER BY s.full_name
        """, (teacher_username,))

        return cur.fetchall()

    except Error as e:
        print(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_username}: {e}")
        return []
    finally:
        if conn:
            conn.close()

# –í –º–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
async def get_student_assignments(student_username: str) -> list[dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT 
                file_name, file_content, created_by, status
            FROM assignment_tasks a
            WHERE 
                student_username = %s AND
                status = true
        """, (student_username,))
        result = cur.fetchall()

        assignments = []
        for row in result:
            assignments.append({
                'file_name': row[0],
                'file_content': row[1],
                'status': row[2],
                'created_by': row[3],
                'status': row[4]
            })
        return assignments
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        return []
    finally:
        if conn:
            conn.close()

@dp.callback_query(F.data == "assign_new_task")
async def start_assignment_process(callback: types.CallbackQuery, state: FSMContext):
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ assign_new_task –≤—ã–∑–≤–∞–Ω")
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    teacher_username = callback.from_user.username
    students = await get_teacher_students(teacher_username)

    if not students:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{full_name} (@{username})",
            callback_data=f"select_student_{username}"
        )]
        for username, full_name in students
    ])

    await callback.message.edit_text(
        "üë®‚Äçüéì –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=keyboard
    )
    await state.set_state(AssignmentStates.WAITING_STUDENT_SELECTION)
    await callback.answer()


@dp.callback_query(
    AssignmentStates.WAITING_STUDENT_SELECTION,
    F.data.startswith("select_my_student_") | F.data.startswith("select_student_")
)
async def select_student(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞ (–æ–±—â–∏–π –¥–ª—è –º–µ—Ç–æ–¥–∏—Å—Ç–∞ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è)"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø callback data
    if callback.data.startswith("select_my_student_"):
        student_username = callback.data.split("_")[3]  # –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    else:
        student_username = callback.data.split("_")[2]  # –¥–ª—è –º–µ—Ç–æ–¥–∏—Å—Ç–∞

    await state.update_data(student_username=student_username)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = await get_user_role_by_username(callback.from_user.username)

    if user_role == 'teacher':
        # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        await callback.message.edit_text(
            f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è @{student_username}:",
            reply_markup=None
        )
        await state.set_state(AssignmentStates.WAITING_TITLE)
    else:
        # –î–ª—è –º–µ—Ç–æ–¥–∏—Å—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        await start_assign_teacher_process(callback.message, state)

    await callback.answer()


@dp.message(AssignmentStates.WAITING_TITLE)
async def process_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –æ–ø–∏—Å–∞–Ω–∏—é"""



    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    student_username = data.get('student_username')

    await message.answer(
        f"üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è @{student_username} (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤–∏—Ç—å '-'):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AssignmentStates.WAITING_DESCRIPTION)


@dp.message(AssignmentStates.WAITING_DESCRIPTION)
async def process_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    description = None if message.text == "-" else message.text
    await state.update_data(description=description)

    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Å–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(AssignmentStates.WAITING_DEADLINE)


@dp.message(AssignmentStates.WAITING_DEADLINE)
async def process_deadline(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ä–æ–∫ —Å–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        deadline = datetime.strptime(message.text, "%d.%m.%Y").date()
        if deadline < date.today():
            await message.answer("‚ùå –°—Ä–æ–∫ —Å–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        await state.update_data(deadline=deadline)
        await message.answer("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º (PDF/DOCX) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
        await state.set_state(AssignmentStates.WAITING_FILE)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")






@dp.callback_query(AssignmentStates.CONFIRMATION, F.data == "confirm_assignment")
async def confirm_assignment(callback: types.CallbackQuery, state: FSMContext):
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ confirm_assignment –≤—ã–∑–≤–∞–Ω")
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    data = await state.get_data()
    print("–ü—ã—Ç–∞—é—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ 2")
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()

        cur.execute("""
            INSERT INTO assignment_tasks 
            (file_name, file_content, created_by, created_by, status)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
        """, (
            data['student_username'],
            callback.from_user.username,
            data['file_name'],
            data['file_content'],
            data['created_by'],
            data.get('status'),
            date.today(),
            'assigned'
        ))
        conn.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_chat_id = await get_user_chat_id(data['student_username'])
        if student_chat_id:
            try:
                await bot.send_message(
                    chat_id=student_chat_id,
                    text=f"üìù –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n\n"
                         f"üìå {data['title']}\n"
                         f"üìÖ –°—Ä–æ–∫ —Å–¥–∞—á–∏: {data['deadline'].strftime('%d.%m.%Y')}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")

        await callback.message.edit_text(
            "‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ!",
            reply_markup=None
        )

    except Error as e:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è",
            reply_markup=None
        )
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
    finally:
        if conn:
            conn.close()
        await state.clear()
    await callback.answer()


@dp.callback_query(AssignmentStates.CONFIRMATION, F.data == "cancel_assignment")
async def cancel_assignment(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=None
    )
    await state.clear()
    await callback.answer()
@dp.callback_query(F.data == "show_my_students")
async def show_my_students_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    user_role = await get_user_role_by_username(callback.from_user.username)
    await show_my_students(callback.message)
    await callback.answer()

@dp.message(F.text == "üë®‚Äçüéì –ú–æ–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã")
async def show_my_students(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    teacher_username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    if await get_user_role_by_username(teacher_username) != 'teacher':
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    students = await get_teacher_students(teacher_username)

    if not students:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = ["üë®‚Äçüéì –í–∞—à–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã:"]
    for idx, (username, full_name) in enumerate(students, 1):
        response.append(f"{idx}. {full_name} (@{username})")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="assign_task_to_my_student"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="show_my_students")
        ]
    ])

    await message.answer("\n".join(response), reply_markup=keyboard)
@dp.callback_query(F.data == "assign_task_to_my_student")
async def assign_task_to_my_student(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è —Å–≤–æ–µ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É"""
    teacher_username = callback.from_user.username
    students = await get_teacher_students(teacher_username)

    if not students:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{full_name} (@{username})",
            callback_data=f"select_my_student_{username}"
        )]
        for username, full_name in students
    ])

    await callback.message.edit_text(
        "üë®‚Äçüéì –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=keyboard
    )
    await state.set_state(AssignmentStates.WAITING_STUDENT_SELECTION)
    await callback.answer()


@dp.message(F.text == "üìù –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
async def handle_individual_task(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    student_username = message.from_user.username

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    assignment = await get_assignment_info(student_username)

    if assignment:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        response = (
            f"üìù <b>–í–∞—à–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {assignment['file_name']}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {assignment['file_content']}\n"
            f"<b>–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:</b> {assignment['created_by'].strftime('%d.%m.%Y')}\n"
            f"<b>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</b> {assignment['status']}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì• –°–∫–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
                    callback_data=f"download_assignment_{assignment['id']}"
                )
            ]
        ])

        await message.answer(response, reply_markup=keyboard, parse_mode="HTML")
    else:
        await message.answer(
            "‚ÑπÔ∏è –í–∞–º –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –≤–∞—à–µ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è."
        )


@dp.callback_query(F.data.startswith("download_assignment_"))
async def download_assignment_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    assignment_id = int(callback.data.split("_")[2])

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞–Ω–∏–∏ –∏–∑ –±–∞–∑—ã
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT file_content, title 
            FROM assignment_tasks 
            WHERE id = %s
        """, (assignment_id,))
        result = cur.fetchone()

        if result:
            file_content, title = result
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å—Ç—É–¥–µ–Ω—Ç—É
            await callback.message.answer_document(
                document=types.BufferedInputFile(
                    file=file_content,
                    filename=f"{title}.pdf"
                ),
                caption=f"üìÑ –í–∞—à–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {title}"
            )
            await callback.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            await callback.answer("‚ùå –§–∞–π–ª –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞", show_alert=True)
    finally:
        if conn:
            conn.close()


@dp.callback_query(F.data.startswith("edit_assignment_"))
async def edit_assignment_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    assignment_id = int(callback.data.split("_")[2])
    await callback.answer("–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∫–Ω–æ–ø–∫–æ–π —Å—Ç–∞—Ä—Ç"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
            [KeyboardButton(text="/start")],  # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç
            [KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        is_persistent=True
    )

    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:",
        reply_markup=keyboard
    )
async def get_user_role_by_username(username: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–∑ –ë–î"""
    if not username:
        return None
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT role FROM users WHERE username = %s", (username,))
        result = cur.fetchone()
        cur.close()
        return result[0] if result else None
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
        return None
    finally:
        if conn is not None:
            conn.close()



@dp.message(AddUserStates.WAITING_USERNAME, F.text)
async def handle_username(message: types.Message, state: FSMContext):

    username = message.text.strip()
    if not username:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ username (–±–µ–∑ '@')", reply_markup=types.ReplyKeyboardRemove())
        return

    # –£–¥–∞–ª—è–µ–º @ –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if username.startswith('@'):
        username = username[1:]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ username –Ω–µ –∑–∞–Ω—è—Ç —á–µ—Ä–µ–∑ –ë–î
    existing_user = await get_user_role_by_username(username)
    if existing_user:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å —Ä–æ–ª—å—é {existing_user}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π username:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è username
        await state.set_state(AddUserStates.WAITING_USERNAME)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(username=username)
    await state.set_state(AddUserStates.WAITING_ROLE)

    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                         reply_markup=types.ReplyKeyboardMarkup(
                             keyboard=[
                                 [
                                    types.KeyboardButton(text="üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç"),
                                    types.KeyboardButton(text="üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
                                 ],
                                 [types.KeyboardButton(text="üìö –ú–µ—Ç–æ–¥–∏—Å—Ç"),
                                 types.KeyboardButton(text="üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                                  ]

                             ],
                             resize_keyboard=True
                         ))


@dp.message(AddUserStates.WAITING_ROLE, F.text)
async def finish_add_user(message: types.Message, state: FSMContext):

    user_data = await state.get_data()
    username = user_data.get("username")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if username == str(message.from_user.username):
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return
    if message.text == "üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç":
        role = "student"
    elif message.text == "üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
        role = "teacher"
    elif message.text == "üìö –ú–µ—Ç–æ–¥–∏—Å—Ç":
        role = "methodist"
    elif message.text == "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        role = "admin"

    success = await add_user_to_db(username, role)

    if not success:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                             reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    await message.answer(f"""
‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é {role.capitalize()}

–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é /start
""", reply_markup=types.ReplyKeyboardRemove())

    await state.clear()

@dp.message(F.text == "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def cmd_view_users(message: types.Message):

    users = await get_all_users()
    if not users:
        await message.answer("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    text = "üìå –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"

    for user in users:
        username, role, name = user

        if role == "admin":
            icon = "üëë"
        elif role == "teacher":
            icon = "üë©‚Äçüè´"
        elif role == "student":
            icon = "üë®‚Äçüéì"
        else:
            icon = "üë§"

        text += f"{icon} @{username} - {name}\n"


    await message.answer(text)

async def get_schedule_list() -> list[tuple]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∏–∑ –ë–î"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT 
                semester_name, 
                start_date, 
                end_date, 
                practice_name,
                responsible_teacher
            FROM schedule 
            ORDER BY start_date DESC
        """)
        schedule = cur.fetchall()
        cur.close()
        return schedule
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {e}")
        return []
    finally:
        if conn:
            conn.close()

@dp.callback_query(F.data == "view_schedule")
@dp.message(F.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def cmd_view_schedule(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"""
    schedule = await get_schedule_list()
    user_role = await get_user_role_by_username(message.from_user.username)

    if not schedule:
        await message.answer("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    response = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
    for idx, (semester, start, end, practice, teacher) in enumerate(schedule, 1):
        response += f"{idx}üìå {semester}\n"
       # response += f"   –ü–µ—Ä–∏–æ–¥: {start.strftime('%d.%m.%Y')} - {end.strftime('%d.%m.%Y')}\n"
        response += f"   –ü—Ä–∞–∫—Ç–∏–∫–∞: {practice}\n"
        response += f"   –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: @{teacher}\n\n"

        # –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è
    if user_role == 'student':
        # –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è
        application_button = InlineKeyboardButton(
            text="üìÑ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ",
            callback_data="start_application"
        )
        markup = InlineKeyboardMarkup(inline_keyboard=[[application_button]])
        await message.answer(response, reply_markup=markup)
    else:
        await message.answer(response)


@dp.callback_query(F.data == "start_application")
async def start_application_callback(callback: types.CallbackQuery, state: FSMContext):
    message = callback.message
    await message.answer(
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞—è–≤–ª–µ–Ω–∏–µ–º (PDF, DOCX):",
            reply_markup=ReplyKeyboardRemove()
        )
    await state.set_state(ApplicationStates.WAITING_APPLICATION_FILE)
    await callback.answer()


async def get_students_list() -> list[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ username —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
                SELECT username, chat_id 
                FROM users 
                WHERE role = 'student' AND chat_id IS NOT NULL
            """)
        return cur.fetchall()
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {e}")
        return []
    finally:
        if conn:
            conn.close()


@dp.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞–º")
async def start_schedule_distribution(message: types.Message, state: FSMContext):
    schedules = await get_schedule_list()

    if not schedules:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return

    buttons = []
    for schedule in schedules:
        buttons.append([types.KeyboardButton(
            text=f"üìÖ {schedule[0]} ({schedule[1].strftime('%d.%m.%Y')}-{schedule[2].strftime('%d.%m.%Y')})"
        )])

    markup = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=markup)
    await state.set_state(ScheduleDistribution.select_schedule)


@dp.message(ScheduleDistribution.select_schedule)
async def select_schedule_for_distribution(message: types.Message, state: FSMContext):
    schedule_text = message.text.replace("üìÖ ", "")
    await state.update_data(selected_schedule=schedule_text)

    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")],
            [types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {schedule_text}\n"
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º?",
        reply_markup=markup
    )
    await state.set_state(ScheduleDistribution.confirm_distribution)


@dp.message(ScheduleDistribution.confirm_distribution, F.text == "‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
async def confirm_distribution(message: types.Message, state: FSMContext):
    data = await state.get_data()
    schedule_text = data['selected_schedule']
    students = await get_students_list()

    if not students:
        await message.answer("‚ùå –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        await state.clear()
        return

    success = 0
    failed = []

    for username, chat_id in students:
        try:
            await message.bot.send_message(
                chat_id=chat_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π chat_id
                text=f"üì¢ –ü—Ä–∞–∫—Ç–∏–∫–∏, –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤ —ç—Ç–æ–º —Å–µ–º–µ—Å—Ç—Ä–µ:\n\n{schedule_text}"
            )
            success += 1
        except Exception as e:
            failed.append(f"{username}: {str(e)}")
            continue

    # –û—Ç—á—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    report = (
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚Ä¢ –û—à–∏–±–∫–∏: {len(failed)}"
    )

    if failed:
        report += "\n\n–û—à–∏–±–∫–∏:\n" + "\n".join(f"‚Üí {f}" for f in failed[:5])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
        if len(failed) > 5:
            report += f"\n...–∏ –µ—â—ë {len(failed) - 5} –æ—à–∏–±–æ–∫"

    await message.answer(report, reply_markup=types.ReplyKeyboardRemove())
    await state.clear()

@dp.message(ScheduleDistribution.confirm_distribution, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_distribution(message: types.Message, state: FSMContext):
    await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()

@dp.callback_query(F.data == "unassign_teacher_menu")
async def unassign_teacher_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç—ã —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏)"""
    students_with_teachers = await get_students_with_teachers_only()

    if not students_with_teachers:
        await callback.answer("‚ÑπÔ∏è –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö –∏ –∏—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"üë®‚Äçüéì {student_name} ‚Üí üë®‚Äçüè´ {teacher_name}",
            callback_data=f"confirm_unassign_{student_username}"
        )]
        for student_username, student_name, _, teacher_name in
        students_with_teachers
    ] + [
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="teacher_management"
        )]
    ])

    await callback.message.edit_text(
        "üë®‚Äçüéì –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n"
        "(–§–æ—Ä–º–∞—Ç: –°—Ç—É–¥–µ–Ω—Ç ‚Üí –¢–µ–∫—É—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.message(F.text == "üë®‚Äçüéì –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
async def show_all_students(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    user_role = await get_user_role_by_username(message.from_user.username)


    students = await get_all_students_with_teachers()

    if not students:
        await message.answer("üìã –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.")
        return

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º
    grouped = {}
    for username, full_name, teacher_username, teacher_name in students:
        key = teacher_name or "‚ùå –ë–µ–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
        if key not in grouped:
            grouped[key] = []
        grouped[key].append((username, full_name))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = ["üìä <b>–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:</b>"]
    for teacher, student_list in grouped.items():
        response.append(f"\nüë®‚Äçüè´ <b>{teacher}</b>:")
        for username, full_name in student_list:
            response.append(f"‚Ä¢ {full_name} (@{username})")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üîÑ –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                callback_data="assign_teacher_menu"
            ),
            InlineKeyboardButton(
                text="‚ùå –°–Ω—è—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                callback_data="unassign_teacher_menu"
            ),
            InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                callback_data="refresh_students"
            )
        ]
    ])

    await message.answer(
        "\n".join(response),
        parse_mode="HTML",
        reply_markup=keyboard
    )



async def get_current_teacher(student_username: str) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT u.username, u.full_name
            FROM users u
            JOIN student_teacher st ON u.username = st.teacher_username
            WHERE st.student_username = %s
        """, (student_username,))
        result = cur.fetchone()
        return {
            'username': result[0],
            'full_name': result[1]
        } if result else None
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
        return None
    finally:
        if conn:
            conn.close()
@dp.callback_query(F.data == "teacher_management")
async def teacher_management(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏"""
    await show_all_students(callback.message)
    await callback.answer()


@dp.callback_query(F.data.startswith("confirm_unassign_"))
async def confirm_unassign(callback: types.CallbackQuery):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    try:
        student_username = callback.data.split("_")[2]
        print(f"[DEBUG] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–∏—è –¥–ª—è @{student_username}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑
        student_info = await get_user_info(student_username)
        current_teacher = await get_current_teacher(student_username)

        if not student_info:
            await callback.answer("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return await callback.message.edit_text(
                "‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="teacher_management")
                ]])
            )

        if not current_teacher:
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", show_alert=True)
            return await callback.message.edit_text(
                f"‚ÑπÔ∏è –£ @{student_username} –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="teacher_management")
                ]])
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–Ω—è—Ç–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n\n"
            f"–°—Ç—É–¥–µ–Ω—Ç: @{student_username}\n"
            f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {current_teacher['full_name']} (@{current_teacher['username']})"
        )

        # –ü—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –°–Ω—è—Ç—å",
                    callback_data=f"execute_unassign_{student_username}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="teacher_management"
                )
            ]
        ])

        await callback.message.edit_text(text, reply_markup=markup)
        await callback.answer()

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)


@dp.callback_query(F.data.startswith("execute_unassign_"))
async def execute_unassign(callback: types.CallbackQuery):
    """–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    try:
        student_username = callback.data.split("_")[2]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_info = await get_user_info(student_username)
        if not student_info:
            await callback.answer("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return await callback.message.edit_text(
                "‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="teacher_management")
                ]])
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        current_teacher = await get_current_teacher(student_username)
        if not current_teacher:
            await callback.answer("‚ÑπÔ∏è –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", show_alert=True)
            return await callback.message.edit_text(
                f"‚ÑπÔ∏è –£ @{student_username} –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="teacher_management")
                ]])
            )

        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = None
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("""
                DELETE FROM student_teacher 
                WHERE student_username = %s
                RETURNING 1
            """, (student_username,))

            if not cur.fetchone():
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", show_alert=True)
                return

            conn.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            student_chat_id = await get_user_chat_id(student_username)
            if student_chat_id:
                try:
                    await bot.send_message(
                        chat_id=student_chat_id,
                        text=f"‚ÑπÔ∏è –° –≤–∞—Å —Å–Ω—è—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏: {current_teacher['full_name']} (@{current_teacher['username']})"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {current_teacher['full_name']} —Å–Ω—è—Ç —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ @{student_username}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="teacher_management")
                ]])
            )

        except Error as e:
            print(f"[DB ERROR] –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"confirm_unassign_{student_username}"),
                    InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="teacher_management")
                ]])
            )
        finally:
            if conn:
                conn.close()

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@dp.callback_query(F.data.startswith("cancel_unassign_"))
async def cancel_unassign(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–Ω—è—Ç–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    student_username = callback.data.split("_")[2]

    await callback.message.edit_text(
        f"‚ùé –°–Ω—è—Ç–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è @{student_username} –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="teacher_management")
        ]])
    )
    await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


@dp.callback_query(F.data.startswith("refresh_unassign_"))
async def refresh_unassign(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–Ω—è—Ç–∏–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    try:
        student_username = callback.data.split("_")[2]
        print(f"[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è @{student_username}")

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        student_info = await get_user_info(student_username)
        current_teacher = await get_current_teacher(student_username)

        if not student_info:
            await callback.answer("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return await callback.message.edit_text(
                "‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="unassign_teacher_menu")
                ]])
            )

        if not current_teacher:
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", show_alert=True)
            return await callback.message.edit_text(
                f"‚ÑπÔ∏è –£ @{student_username} –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"refresh_unassign_{student_username}"),
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="unassign_teacher_menu")
                ]])
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        await callback.message.edit_text(
            f"üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n\n"
            f"–°—Ç—É–¥–µ–Ω—Ç: @{student_username}\n"
            f"–¢–µ–∫—É—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {current_teacher['full_name']} (@{current_teacher['username']})\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–Ω—è—Ç–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞, —Å–Ω—è—Ç—å", callback_data=f"execute_unassign_{student_username}"),
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"cancel_unassign_{student_username}")
                ],
                [
                    InlineKeyboardButton(text="üîÑ –ï—â—ë —Ä–∞–∑ –æ–±–Ω–æ–≤–∏—Ç—å",
                                         callback_data=f"refresh_unassign_{student_username}")
                ]
            ])
        )
        await callback.answer("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"refresh_unassign_{student_username}"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="unassign_teacher_menu")
            ]])
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)



async def get_all_students_with_teachers() -> list[tuple]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ –∏ –±–µ–∑)"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT 
                s.username as student_username,
                s.full_name as student_name,
                t.username as teacher_username, 
                t.full_name as teacher_name
            FROM users s
            LEFT JOIN student_teacher st ON s.username = st.student_username
            LEFT JOIN users t ON st.teacher_username = t.username
            WHERE s.role = 'student'
            ORDER BY s.username
        """)
        return cur.fetchall()
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {e}")
        return []
    finally:
        if conn:
            conn.close()

async def get_students_with_teachers_only() -> list[tuple]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT 
                s.username as student_username,
                s.full_name as student_name,
                t.username as teacher_username, 
                t.full_name as teacher_name
            FROM users s
            JOIN student_teacher st ON s.username = st.student_username
            JOIN users t ON st.teacher_username = t.username
            WHERE s.role = 'student'
            ORDER BY s.username
        """)
        return cur.fetchall()
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏: {e}")
        return []
    finally:
        if conn:
            conn.close()


@dp.callback_query(F.data == "assign_teacher_menu")
async def assign_teacher_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    students = await get_students_without_teachers()

    if not students:
        await callback.answer("‚úÖ –£ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –µ—Å—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{full_name} (@{username})",
            callback_data=f"assign_student_{username}"
        )]
        for username, full_name in students
    ])

    await callback.message.edit_text(
        "üë®‚Äçüéì –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=keyboard
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("assign_student_"))
async def select_student_for_teacher(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º callback data: assign_student_<student_username>
        student_username = callback.data.split("_")[2]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º student_username –≤ state
        await state.update_data(student_username=student_username)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        teachers = await get_teachers_list()

        if not teachers:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{full_name} (@{username})",
                callback_data=f"assign_teacher_{student_username}_{username}"
            )]
            for username, full_name in teachers
        ])

        await callback.message.edit_text(
            f"üë®‚Äçüè´ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ @{student_username}:",
            reply_markup=keyboard
        )
        await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ select_student_for_teacher: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç—É–¥–µ–Ω—Ç–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@dp.callback_query(AssignTeacherStates.CONFIRM_ASSIGNMENT, F.data == "confirm_assignment")
async def confirm_teacher_assignment(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å—Ç—É–¥–µ–Ω—Ç—É"""
    try:
        data = await state.get_data()
        student_username = data['student_username']
        teacher_username = data['teacher_username']

        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if not student_username or not teacher_username:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ", show_alert=True)
            return

        conn = None
        try:
            conn = get_db_connection()
            cur = conn.cursor()

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–≤—è–∑—å
            cur.execute("DELETE FROM student_teacher WHERE student_username = %s", (student_username,))

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
            cur.execute(
                "INSERT INTO student_teacher (student_username, teacher_username) VALUES (%s, %s)",
                (student_username, teacher_username)
            )
            conn.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            student_chat_id = await get_user_chat_id(student_username)
            if student_chat_id:
                teacher_info = await get_user_info(teacher_username)
                if teacher_info:
                    await bot.send_message(
                        chat_id=student_chat_id,
                        text=f"üë®‚Äçüè´ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {teacher_info['full_name']} (@{teacher_username})"
                    )

            await callback.message.edit_text(
                "‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω!",
                reply_markup=None
            )

        except Error as e:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
                reply_markup=None
            )
            print(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        finally:
            if conn:
                conn.close()
            await state.clear()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
    finally:
        await callback.answer()


async def notify_assignment(student_username: str, teacher_username: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é"""
    student_chat_id = await get_user_chat_id(student_username)
    teacher_chat_id = await get_user_chat_id(teacher_username)

    student_info = await get_user_info(student_username)
    teacher_info = await get_user_info(teacher_username)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
    if student_chat_id:
        try:
            await bot.send_message(
                chat_id=student_chat_id,
                text=f"üë®‚Äçüè´ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {teacher_info['full_name']} (@{teacher_username})"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é—ë
    if teacher_chat_id:
        try:
            await bot.send_message(
                chat_id=teacher_chat_id,
                text=f"üë®‚Äçüéì –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç: {student_info['full_name']} (@{student_username})"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")

async def delete_assignment(student_username: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Å–≤—è–∑—å —Å—Ç—É–¥–µ–Ω—Ç-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            DELETE FROM student_teacher 
            WHERE student_username = %s
            RETURNING 1
        """, (student_username,))
        conn.commit()
        return bool(cur.fetchone())
    except Error as e:
        print(f"[DB ERROR] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏: {e}")
        return False
    finally:
        if conn:
            conn.close()


@dp.callback_query(F.data.startswith("execute_unassign_"))
async def execute_unassign(callback: types.CallbackQuery):
    """–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    try:
        student_username = callback.data.split("_")[2]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_info = await get_user_info(student_username)
        if not student_info:
            await callback.answer("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return await callback.message.edit_text(
                "‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="teacher_management")
                ]])
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        current_teacher = await get_current_teacher(student_username)
        if not current_teacher:
            await callback.answer("‚ÑπÔ∏è –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", show_alert=True)
            return await callback.message.edit_text(
                f"‚ÑπÔ∏è –£ @{student_username} –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="teacher_management")
                ]])
            )

        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = None
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("""
                DELETE FROM student_teacher 
                WHERE student_username = %s
                RETURNING 1
            """, (student_username,))

            if not cur.fetchone():
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", show_alert=True)
                return

            conn.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            student_chat_id = await get_user_chat_id(student_username)
            if student_chat_id:
                try:
                    await bot.send_message(
                        chat_id=student_chat_id,
                        text=f"‚ÑπÔ∏è –° –≤–∞—Å —Å–Ω—è—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏: {current_teacher['full_name']} (@{current_teacher['username']})"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {current_teacher['full_name']} —Å–Ω—è—Ç —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ @{student_username}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="teacher_management")
                ]])
            )

        except Error as e:
            print(f"[DB ERROR] –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"confirm_unassign_{student_username}"),
                    InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="teacher_management")
                ]])
            )
        finally:
            if conn:
                conn.close()

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data == "refresh_students")
async def refresh_students_list(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞...")
    await show_all_students(callback.message)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è
@dp.message(F.text == "üìÑ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ")
async def start_application(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è"""
    await message.answer(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞—è–≤–ª–µ–Ω–∏–µ–º (PDF, DOCX):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(ApplicationStates.WAITING_APPLICATION_FILE)


@dp.message(
    AssignmentStates.WAITING_FILE,
    ApplicationStates.WAITING_APPLICATION_FILE,
    F.document | F.photo | (F.text & (F.text == "-"))
)
async def handle_uploaded_file(message: types.Message, state: FSMContext, bot: Bot):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤"""
    try:
        current_state = await state.get_state()
        is_assignment = current_state == AssignmentStates.WAITING_FILE.state
        is_application = current_state == ApplicationStates.WAITING_APPLICATION_FILE.state

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞/–¥–æ–∫—É–º–µ–Ω—Ç–∞
        file_info = {
            'file_id': None,
            'file_name': None,
            'file_type': None,
            'file_content': None
        }

        if message.document:
            if is_assignment:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
                allowed_types = {
                    'application/pdf',
                    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                    'application/msword'
                }

                if message.document.mime_type not in allowed_types:
                    await message.answer(
                        "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã PDF –∏–ª–∏ DOC/DOCX",
                        reply_markup=types.ReplyKeyboardRemove()
                    )
                    return

                try:
                    file = await bot.get_file(message.document.file_id)
                    file_bytes = (await bot.download_file(file.file_path)).read()
                    file_info['file_content'] = file_bytes
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω–∏—è: {e}")
                    await message.answer(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                        reply_markup=types.ReplyKeyboardRemove()
                    )
                    return

            file_info.update({
                'file_id': message.document.file_id,
                'file_name': message.document.file_name or "document",
                'file_type': 'document'
            })

        elif message.photo:
            file_info.update({
                'file_id': message.photo[-1].file_id,
                'file_name': f"photo_{message.photo[-1].file_unique_id}.jpg",
                'file_type': 'photo'
            })

        elif message.text == "-":
            file_info.update({
                'file_name': "–Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω",
                'file_type': 'none'
            })

        else:
            await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ñ–æ—Ç–æ")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(**file_info)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if is_assignment:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
            required_fields = ['student_username', 'title', 'description', 'deadline']
            missing_fields = [field for field in required_fields if field not in data]

            if missing_fields:
                error_msg = "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n" + "\n".join(
                    f"‚Ä¢ {field}" for field in missing_fields)
                await message.answer(error_msg, reply_markup=types.ReplyKeyboardRemove())
                await state.clear()
                return

            confirm_text = (
                "üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
                f"üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç: @{data['student_username']}\n"
                f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üìÖ –°—Ä–æ–∫ —Å–¥–∞—á–∏: {data['deadline'].strftime('%d.%m.%Y')}\n"
                f"üìé –§–∞–π–ª: {file_info['file_name']}"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_assignment"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_assignment")
            ]])

            next_state = AssignmentStates.CONFIRMATION

        elif is_application:
            confirm_text = (
                f"üìÑ –§–∞–π–ª '{file_info['file_name']}' –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ—Ç–æ–¥–∏—Å—Ç—É.\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data="confirm_application"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")
            ]])

            next_state = ApplicationStates.WAITING_APPLICATION_CONFIRM

        await message.answer(confirm_text, reply_markup=keyboard)
        await state.set_state(next_state)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.clear()


@dp.callback_query(ApplicationStates.WAITING_APPLICATION_CONFIRM, F.data == "confirm_application")
async def confirm_application(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é"""
    data = await state.get_data()
    methodists = await get_methodists_list()
    user_role = await get_user_role_by_username(callback.from_user.username)

    if not methodists:
        await callback.message.edit_text("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏")
        await state.clear()
        return

    success = 0
    for methodist_username, methodist_chat_id in methodists:
        try:
            caption = (
                f"üì® –ù–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞:\n"
                f"üë§ {data['student_full_name']} (@{data['student_username']})\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )

            if data['file_type'] == 'document':
                await bot.send_document(
                    chat_id=methodist_chat_id,
                    document=data['file_id'],
                    caption=caption
                )
            elif data['file_type'] == 'photo':
                await bot.send_photo(
                    chat_id=methodist_chat_id,
                    photo=data['file_id'],
                    caption=caption
                )
            success += 1

        except exceptions.TelegramBadRequest as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç–æ–¥–∏—Å—Ç—É {methodist_username} (chat_id: {methodist_chat_id}): {e}")
            continue

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_role == 'student':
        markup = ReplyKeyboardMarkup(
            keyboard=[
                         [
                             types.KeyboardButton(text="üë®‚Äçüè´ –ú–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"),
                             types.KeyboardButton(text="üìÑ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ")
                         ],
                         [
                             types.KeyboardButton(text="üìù –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
                         ]
                     ] ,
            resize_keyboard=True
        )
    elif user_role == 'methodist':
        markup = ReplyKeyboardMarkup(
            keyboard=[
                         [
                             types.KeyboardButton(text="üë®‚Äçüè´ –ú–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"),
                             types.KeyboardButton(text="üìÑ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ")
                         ],
                         [
                             types.KeyboardButton(text="üìù –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
                         ]
                     ] ,
            resize_keyboard=True
        )
    else:
        markup = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîÑ –°—Ç–∞—Ä—Ç")]
            ],
            resize_keyboard=True
        )

    if success > 0:
        await callback.message.answer(
            f"‚úÖ –í–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success} –º–µ—Ç–æ–¥–∏—Å—Ç–∞–º!",
            reply_markup=markup
        )
    else:
        await callback.message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∏ –æ–¥–Ω–æ–º—É –º–µ—Ç–æ–¥–∏—Å—Ç—É",
            reply_markup=markup
        )

    await state.clear()
    await callback.answer()


@dp.callback_query(ApplicationStates.WAITING_APPLICATION_CONFIRM, F.data == "cancel_application")
async def cancel_application(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–ª–µ–Ω–∏—è —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é"""
    user_role = await get_user_role_by_username(callback.from_user.username)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user_role == 'student':
        markup = ReplyKeyboardMarkup(
            keyboard=[
                         [
                             types.KeyboardButton(text="üë®‚Äçüè´ –ú–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"),
                             types.KeyboardButton(text="üìÑ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ")
                         ],
                         [
                             types.KeyboardButton(text="üìù –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
                         ]
                     ] ,
            resize_keyboard=True
        )
    else:
        markup = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîÑ –°—Ç–∞—Ä—Ç")]
            ],
            resize_keyboard=True
        )

    await callback.message.answer(
        "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=markup
    )
    await state.clear()
    await callback.answer()


async def get_user_info(username: str) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
                SELECT full_name, chat_id 
                FROM users 
                WHERE username = %s
            """, (username,))
        result = cur.fetchone()
        if result:
            return {'full_name': result[0], 'chat_id': result[1]}
        return None
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None
    finally:
        if conn:
            conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@dp.message(ApplicationStates.WAITING_APPLICATION_CONFIRM, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_application(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–∞—á—É –∑–∞—è–≤–ª–µ–Ω–∏—è"""
    await message.answer(
        "‚ùå –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.clear()


# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤
async def get_methodists_list() -> list[tuple]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤ —Å chat_id"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT username, chat_id 
            FROM users 
            WHERE role = 'methodist' AND chat_id IS NOT NULL
        """)
        return cur.fetchall()
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤: {e}")
        return []
    finally:
        if conn:
            conn.close()

async def user_exists(username: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT 1 FROM users WHERE username = %s", (username,))
        return bool(cur.fetchone())
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    finally:
        if conn:
            conn.close()


@dp.callback_query(F.data.startswith("assign_teacher_"))
async def assign_teacher_handler(callback: types.CallbackQuery, state: FSMContext = None):
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        parts = callback.data.split('_')
        if len(parts) != 4:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö callback", show_alert=True)
            return

        student_username = parts[2]  # –¢—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç - student
        teacher_username = parts[3]  # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç - teacher –î–í–ê –î–ù–Ø –Ω–∞ —ç—Ç–æ —É–±–∏–ª–∞, –∫–∞–ø–µ—Ü

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ
        if not await user_exists(student_username):
            await callback.answer(f"‚ùå –°—Ç—É–¥–µ–Ω—Ç @{student_username} –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        if not await user_exists(teacher_username):
            await callback.answer(f"‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å @{teacher_username} –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ teacher_username –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        teacher_role = await get_user_role_by_username(teacher_username)
        if teacher_role != 'teacher':
            await callback.answer(f"‚ùå @{teacher_username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º", show_alert=True)
            return

        conn = None
        try:
            conn = get_db_connection()
            cur = conn.cursor()

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–≤—è–∑—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
            cur.execute("""
                DELETE FROM student_teacher 
                WHERE student_username = %s
            """, (student_username,))

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
            cur.execute("""
                INSERT INTO student_teacher 
                (student_username, teacher_username)
                VALUES (%s, %s)
            """, (student_username, teacher_username))

            conn.commit()

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            teacher_info = await get_user_info(teacher_username)
            student_info = await get_user_info(student_username)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            student_chat_id = await get_user_chat_id(student_username)
            if student_chat_id and teacher_info:
                try:
                    await bot.send_message(
                        chat_id=student_chat_id,
                        text=f"üë®‚Äçüè´ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏: {teacher_info['full_name']} (@{teacher_username})"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            teacher_chat_id = await get_user_chat_id(teacher_username)
            if teacher_chat_id and student_info:
                try:
                    await bot.send_message(
                        chat_id=teacher_chat_id,
                        text=f"üë®‚Äçüéì –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç: {student_info['full_name']} (@{student_username})"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")

            await callback.message.edit_text(
                f"‚úÖ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å {teacher_info['full_name']} –Ω–∞–∑–Ω–∞—á–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç—É @{student_username}",
                reply_markup=None
            )

        except Error as e:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                reply_markup=None
            )
            print(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        finally:
            if conn:
                conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        if state:
            await state.clear()
        await callback.answer()



async def show_students_list(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    students = await get_students_without_teachers()

    if not students:
        await message.answer("‚ùå –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–µ–∑ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π")
        await state.clear()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{full_name} (@{username})", callback_data=f"assign_student_{username}")]
        for username, full_name in students
    ])

    await message.answer("üë®‚Äçüéì –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞:", reply_markup=keyboard)


async def get_students_without_teachers() -> list[tuple]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT u.username, u.full_name 
            FROM users u
            LEFT JOIN student_teacher st ON u.username = st.student_username
            WHERE u.role = 'student' AND st.teacher_username IS NULL
            ORDER BY u.username
        """)
        return cur.fetchall()
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []
    finally:
        if conn:
            conn.close()



async def start_assign_teacher_process(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    teachers = await get_teachers_list()

    if not teachers:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
        await state.clear()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{full_name} (@{username})", callback_data=f"assign_teacher_{username}")]
        for username, full_name in teachers
    ])

    await message.answer("üë®‚Äçüè´ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
    await state.set_state(AssignTeacherStates.WAITING_TEACHER_SELECTION)





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@dp.callback_query(AssignTeacherStates.WAITING_TEACHER_SELECTION, F.data.startswith("assign_teacher_"))
async def process_teacher_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""

    teacher_username = callback.data.split("_")[2]
    data = await state.get_data()
    student_username = data.get('student_username')

    if not student_username:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
    student_info = await get_user_info(student_username)
    teacher_info = await get_user_info(teacher_username)

    if not student_info or not teacher_info:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    await state.update_data(teacher_username=teacher_username)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_text = (
        "üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ:\n\n"
        f"üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç: {student_info['full_name']} (@{student_username})\n"
        f"üë®‚Äçüè´ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {teacher_info['full_name']} (@{teacher_username})\n\n"
        "–ù–∞–∑–Ω–∞—á–∏—Ç—å —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞?"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_assignment"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_assignment")
        ]
    ])

    await callback.message.edit_text(confirm_text, reply_markup=keyboard)
    await state.set_state(AssignTeacherStates.CONFIRM_ASSIGNMENT)
    await state.update_data(teacher_username=teacher_username, student_username=student_username)

    await callback.answer()
# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã
async def get_assignment_file() -> bytes:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–π–ª —Ç–∏–ø–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT file_content FROM assignment_tasks 
            WHERE status = TRUE 
            ORDER BY created_at DESC 
            LIMIT 1
        """)
        result = cur.fetchone()
        return result[0] if result else None
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω–∏—è: {e}")
        return None
    finally:
        if conn:
            conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
@dp.callback_query(AssignTeacherStates.CONFIRM_ASSIGNMENT, F.data == "confirm_assignment")
async def confirm_assignment(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    student_username = data.get('student_username')
    teacher_username = data.get('teacher_username')

    if not student_username or not teacher_username:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ")
        await state.clear()
        return

    print(f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: student={student_username}, teacher={teacher_username}")


    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        cur.execute("""
            DELETE FROM student_teacher 
            WHERE student_username = %s
        """, (student_username,))

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        cur.execute("""
            INSERT INTO student_teacher (student_username, teacher_username)
            VALUES (%s, %s)
        """, (student_username, teacher_username))

        conn.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_chat_id = await get_user_chat_id(student_username)
        teacher_info = await get_user_info(teacher_username)

        if student_chat_id and teacher_info:
            try:
                await bot.send_message(
                    chat_id=student_chat_id,
                    text=f"üë®‚Äçüè´ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏: {teacher_info['full_name']} (@{teacher_username})"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                assignment_file = await get_assignment_file()
                if assignment_file:
                    cur.execute("""
                        INSERT INTO assignments 
                        (student_username, teacher_username, title, file_content, status)
                        VALUES (%s, %s, %s, %s, %s)
                    """, (
                        student_username,
                        teacher_username,
                        "–¢–∏–ø–æ–≤–æ–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
                        assignment_file,
                        'assigned'
                    ))
                    conn.commit()

                    await bot.send_document(
                        chat_id=student_chat_id,
                        document=types.BufferedInputFile(
                            file=assignment_file,
                            filename="–¢–∏–ø–æ–≤–æ–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.pdf"
                        ),
                        caption="üìÑ –í–∞—à–µ —Ç–∏–ø–æ–≤–æ–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
                    )
                else:
                    await bot.send_message(
                        chat_id=student_chat_id,
                        text="‚ÑπÔ∏è –§–∞–π–ª —Å —Ç–∏–ø–æ–≤—ã–º –∑–∞–¥–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    )

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")

        await callback.message.edit_text(
            "‚úÖ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω!",
            reply_markup=None
        )

    except Error as e:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
            reply_markup=None
        )
        print(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è: {e}")
    finally:
        if conn:
            conn.close()
        await state.clear()
    await callback.answer()


@dp.message(Command("upload_template"))
async def upload_template_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
    await message.answer("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ç–∏–ø–æ–≤—ã–º –∑–∞–¥–∞–Ω–∏–µ–º (PDF/DOCX)")



@dp.message(F.document & (F.document.mime_type == 'application/pdf') |
            (F.document.mime_type == 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'))
async def handle_template_upload(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""


    conn = None
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_bytes = (await bot.download_file(file.file_path)).read()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        conn = get_db_connection()
        cur = conn.cursor()



        # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π
        cur.execute("""
            INSERT INTO assignment_tasks 
            (file_name, file_content, created_by, status)
            VALUES (%s, %s, %s, TRUE)
        """, (
            message.document.file_name,
            file_bytes,
            message.from_user.username
        ))

        conn.commit()
        user_role = await get_user_role_by_username(message.from_user.username)
        if user_role == "teacher":
            await message.answer(
                f"""‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!
            –§–∞–π–ª: {message.document.file_name}
            –†–∞–∑–º–µ—Ä: {len(file_bytes) / 1024:.1f} KB\n 
        –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é /start"""
            )
        else:
            await message.answer(
                f"""‚úÖ –ó–∞—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!
        –§–∞–π–ª: {message.document.file_name}
        –†–∞–∑–º–µ—Ä: {len(file_bytes) / 1024:.1f} KB\n 
        –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é /start""")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏—è: {str(e)}")
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")

    finally:
        if conn:
            conn.close()


@dp.message(F.document)
async def handle_wrong_file_type(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    if message.document.mime_type not in [
        'application/pdf',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    ]:
        await message.answer("""
        ‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –∏–ª–∏ DOCX.
        """)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
@dp.callback_query(AssignTeacherStates.CONFIRM_ASSIGNMENT, F.data == "cancel_assignment")
async def cancel_assignment(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=None
    )
    await state.clear()
    await callback.answer()


async def get_user_chat_id(username: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT chat_id FROM users WHERE username = %s
        """, (username,))
        result = cur.fetchone()
        return result[0] if result else None
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id: {e}")
        return None
    finally:
        if conn:
            conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
@dp.message(F.text == "üë®‚Äçüè´ –ú–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
async def show_my_teacher(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ"""
    student_username = message.from_user.username
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT u.username, u.full_name 
            FROM student_teacher st
            JOIN users u ON st.teacher_username = u.username
            WHERE st.student_username = %s
        """, (student_username,))
        teacher = cur.fetchone()

        if teacher:
            username, full_name = teacher
            await message.answer(
                f"üë®‚Äçüè´ –í–∞—à —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏:\n"
                f"{full_name} (@{username})\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
            )
        else:
            await message.answer(
                "‚ùå –í–∞–º –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏.\n"
                "–ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."
            )
    except Error as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        if conn:
            conn.close()




# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
