import asyncio
from aiogram import Bot, Dispatcher, types, F, exceptions
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = "8010104498:AAFu41LIYHrPWWl-kvT1pQ0GZrxE8AL0wZE"
ADMIN_USERNAME = "KitLittle"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Ä–µ–º–µ–Ω–Ω–∞—è)
users_db = {
    ADMIN_USERNAME: {"role": "admin", "name": "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"}
}


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class AddUserStates(StatesGroup):
    WAITING_USERNAME = State()
    WAITING_ROLE = State()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.from_user.username == ADMIN_USERNAME:
        add_user_btn = types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        view_users_btn = types.KeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        markup = types.ReplyKeyboardMarkup(
            keyboard=[[add_user_btn], [view_users_btn]],
            resize_keyboard=True
        )
        await message.answer("‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=markup)
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–∞–∂–µ –Ω–µ–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        role = await get_user_role(message)
        if role:
            if role == "admin":
                await message.answer(f"‚ú® –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í–∞—à–∞ —Ä–æ–ª—å: {role}")
            else:
                await message.answer(f"üìã –ü—Ä–∏–≤–µ—Ç! –í–∞—à–∞ —Ä–æ–ª—å: {role}")
        else:
            await message.answer("üìã –ü—Ä–∏–≤–µ—Ç! –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def start_add_user(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return

    await state.set_state(AddUserStates.WAITING_USERNAME)
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ '@'):")


@dp.message(AddUserStates.WAITING_USERNAME, F.text)
async def handle_username(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ username"""
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    username = message.text.strip()
    if not username:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ username (–±–µ–∑ '@')", reply_markup=types.ReplyKeyboardRemove())
        return

    # –£–¥–∞–ª—è–µ–º @ –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if username.startswith('@'):
        username = username[1:]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ username –Ω–µ –∑–∞–Ω—è—Ç
    if username in users_db and username != ADMIN_USERNAME:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å —Ä–æ–ª—å—é {users_db[username]['role']}",
                             reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(username=username)
    await state.set_state(AddUserStates.WAITING_ROLE)

    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                         reply_markup=types.ReplyKeyboardMarkup(
                             keyboard=[
                                 [types.KeyboardButton(text="üë®‚Äçüéì Student")],
                                 [types.KeyboardButton(text="üë©‚Äçüè´ Teacher")],
                                 [types.KeyboardButton(text="üëë Admin")],
                                 [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
                             ],
                             resize_keyboard=True
                         )
                         )


@dp.message(AddUserStates.WAITING_ROLE, F.text)
async def finish_add_user(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    user_data = await state.get_data()
    username = user_data.get("username")

    role_text = message.text.strip().lower()
    if role_text == "student" or role_text == "üë®‚Äçüéì student":
        role = "student"
    elif role_text == "teacher" or role_text == "üë©‚Äçüè´ teacher":
        role = "teacher"
    elif role_text == "admin" or role_text == "üëë admin":
        role = "admin"
    elif role_text == "üîô –Ω–∞–∑–∞–¥" or role_text == "–Ω–∞–∑–∞–¥" or role_text == "back":
        await message.answer("‚ùå –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    if username is None or role is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if username == str(message.from_user.username) and message.from_user.username != ADMIN_USERNAME:
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ —Ä–æ–ª—å—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    users_db[username] = {
        "role": role,
        "name": message.from_user.first_name or "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        "created_at": datetime.now().strftime("%Y-%m-%d %H:%M")
    }

    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    if message.from_user.username == ADMIN_USERNAME:
        users_db[username] = {
            "role": "admin",
            "name": "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            "created_at": users_db.get(username, {}).get("created_at", datetime.now().strftime("%Y-%m-%d %H:%M"))
        }

    await message.answer(f"""
‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é {role.capitalize()}

–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é /start
""", reply_markup=types.ReplyKeyboardRemove())

    await state.clear()


async def get_user_role(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—é"""
    username = message.from_user.username

    if username in users_db:
        return users_db[username]["role"]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–ø–æ username)
    if username == ADMIN_USERNAME:
        return "admin"

    return None


@dp.message(F.text == "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def cmd_view_users(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_list = []
    for username, user_data in users_db.items():
        if username in (ADMIN_USERNAME, message.from_user.username):
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ
            role_text = user_data["role"].capitalize()
            if username == ADMIN_USERNAME:
                role_text = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            if username == message.from_user.username and role_text != "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
                role_text = "‚ú® " + role_text

            users_list.append(f"{role_text}:@{username} ({user_data['name']})")
        else:
            users_list.append(
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:@{username} ({user_data['name']}) - –†–æ–ª—å: {user_data['role'].capitalize()}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ –æ—Ç–¥–µ–ª—å–Ω–æ
    if ADMIN_USERNAME in users_db:
        users_list.insert(0, f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:@{ADMIN_USERNAME} ({users_db[ADMIN_USERNAME]['name']})")
    # –ò —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ
    current_user_role = await get_user_role(message) or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
    if message.from_user.username and message.from_user.username not in users_db:
        users_list.append(f"üë§ –í—ã:@{message.from_user.username} - –†–æ–ª—å: {current_user_role}")

    if not users_list:
        await message.answer("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_users")
            ]
        ]
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    content = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã:\n\n"
    content += "\n".join(users_list)

    await message.answer(content, reply_markup=markup, parse_mode=ParseMode.HTML)


@dp.callback_query(F.data == "refresh_users")
async def callback_refresh_users(call: types.CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await call.answer()
    await cmd_view_users(await bot.send_message(call.message.chat.id, reply_markup=None))
    await call.message.delete()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{ADMIN_USERNAME}")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
